// Generated by Haxe 4.2.0
#ifndef INCLUDED_haxe_ui_util_ByteConverter
#define INCLUDED_haxe_ui_util_ByteConverter

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS3(haxe,ui,util,ByteConverter)
HX_DECLARE_CLASS2(openfl,utils,ByteArrayData)
HX_DECLARE_CLASS2(openfl,utils,IDataInput)
HX_DECLARE_CLASS2(openfl,utils,IDataOutput)

namespace haxe{
namespace ui{
namespace util{


class HXCPP_CLASS_ATTRIBUTES ByteConverter_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ByteConverter_obj OBJ_;
		ByteConverter_obj();

	public:
		enum { _hx_ClassId = 0x7f56084c };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="haxe.ui.util.ByteConverter")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"haxe.ui.util.ByteConverter"); }

		inline static ::hx::ObjectPtr< ByteConverter_obj > __new() {
			::hx::ObjectPtr< ByteConverter_obj > __this = new ByteConverter_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< ByteConverter_obj > __alloc(::hx::Ctx *_hx_ctx) {
			ByteConverter_obj *__this = (ByteConverter_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ByteConverter_obj), false, "haxe.ui.util.ByteConverter"));
			*(void **)__this = ByteConverter_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ByteConverter_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ByteConverter",d8,e8,d3,d2); }

		static  ::openfl::utils::ByteArrayData fromHaxeBytes( ::haxe::io::Bytes bytes);
		static ::Dynamic fromHaxeBytes_dyn();

		static  ::haxe::io::Bytes toHaxeBytes( ::openfl::utils::ByteArrayData ba);
		static ::Dynamic toHaxeBytes_dyn();

};

} // end namespace haxe
} // end namespace ui
} // end namespace util

#endif /* INCLUDED_haxe_ui_util_ByteConverter */ 
