// Generated by Haxe 4.2.0
#ifndef INCLUDED_Moves
#define INCLUDED_Moves

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Moves)



class HXCPP_CLASS_ATTRIBUTES Moves_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Moves_obj OBJ_;
		Moves_obj();

	public:
		enum { _hx_ClassId = 0x3c231162 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="Moves")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"Moves"); }

		inline static ::hx::ObjectPtr< Moves_obj > __new() {
			::hx::ObjectPtr< Moves_obj > __this = new Moves_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Moves_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Moves_obj *__this = (Moves_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Moves_obj), false, "Moves"));
			*(void **)__this = Moves_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Moves_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Moves",22,3c,93,9f); }

		int x;
		int y;
};


#endif /* INCLUDED_Moves */ 
