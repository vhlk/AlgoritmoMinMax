// Generated by Haxe 4.2.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_MinMax
#include <MinMax.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_User
#include <User.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ui_Toolkit
#include <haxe/ui/Toolkit.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventBase
#include <haxe/ui/backend/EventBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventImpl
#include <haxe/ui/backend/EventImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_components_Button
#include <haxe/ui/components/Button.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_core_InteractiveComponent
#include <haxe/ui/core/InteractiveComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_events_MouseEvent
#include <haxe/ui/events/MouseEvent.h>
#endif
#ifndef INCLUDED_haxe_ui_events_UIEvent
#include <haxe/ui/events/UIEvent.h>
#endif
#ifndef INCLUDED_haxe_ui_focus_IFocusable
#include <haxe/ui/focus/IFocusable.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <haxe/ui/validation/IValidating.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_motion_Actuate
#include <motion/Actuate.h>
#endif
#ifndef INCLUDED_motion_actuators_GenericActuator
#include <motion/actuators/GenericActuator.h>
#endif
#ifndef INCLUDED_motion_actuators_IGenericActuator
#include <motion/actuators/IGenericActuator.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_sys_thread__Thread_HaxeThread
#include <sys/thread/_Thread/HaxeThread.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e47a9afac0942eb9_19_new,"Main","new",0x6616a5cb,"Main.new","Main.hx",19,0x087e5c05)
HX_DEFINE_STACK_FRAME(_hx_pos_e47a9afac0942eb9_48_new,"Main","new",0x6616a5cb,"Main.new","Main.hx",48,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_76_drawIfTerminal,"Main","drawIfTerminal",0x2617d812,"Main.drawIfTerminal","Main.hx",76,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_93_putIADisc,"Main","putIADisc",0xf04abf07,"Main.putIADisc","Main.hx",93,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_91_putIADisc,"Main","putIADisc",0xf04abf07,"Main.putIADisc","Main.hx",91,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_104_putDisc,"Main","putDisc",0x551470af,"Main.putDisc","Main.hx",104,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_123_calculateDiscX,"Main","calculateDiscX",0x0b34a892,"Main.calculateDiscX","Main.hx",123,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_131_calculateDiscY,"Main","calculateDiscY",0x0b34a893,"Main.calculateDiscY","Main.hx",131,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_134_calculateBtnPos,"Main","calculateBtnPos",0x48341889,"Main.calculateBtnPos","Main.hx",134,0x087e5c05)

void Main_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_19_new)
HXDLIN(  19)		 ::Main _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  20)		super::__construct();
HXLINE(  22)		::Array< ::Dynamic> this1 = ::Array_obj< ::Dynamic>::__new(4);
HXDLIN(  22)		::Array< ::Dynamic> allMoves = this1;
HXLINE(  23)		{
HXLINE(  23)			int _g = 0;
HXDLIN(  23)			int _g1 = allMoves->length;
HXDLIN(  23)			while((_g < _g1)){
HXLINE(  23)				_g = (_g + 1);
HXDLIN(  23)				int i = (_g - 1);
HXDLIN(  23)				allMoves->__unsafe_set(i,::Array_obj< ::Dynamic>::__new(0));
            			}
            		}
HXLINE(  25)		 ::openfl::display::BitmapData wireframeData = ::openfl::utils::Assets_obj::getBitmapData(HX_("assets/wireframe.png",37,71,96,b0),null());
HXLINE(  26)		 ::openfl::display::Bitmap wireframe =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,wireframeData,null(),null());
HXLINE(  27)		this->addChild(wireframe);
HXLINE(  28)		wireframe->smoothing = true;
HXLINE(  29)		wireframe->set_width(( (Float)(this->stage->stageWidth) ));
HXLINE(  30)		wireframe->set_height(( (Float)((this->stage->stageHeight - 50)) ));
HXLINE(  31)		wireframe->set_y(( (Float)(50) ));
HXLINE(  33)		::haxe::ui::Toolkit_obj::init(null());
HXLINE(  35)		{
HXLINE(  35)			int _g2 = 1;
HXDLIN(  35)			while((_g2 < 5)){
            				HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0, ::Main,_gthis,::Array< ::Dynamic>,allMoves,int,i) HXARGC(1)
            				void _hx_run( ::haxe::ui::events::MouseEvent e){
            					HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_48_new)
HXLINE(  49)					int index = (i - 1);
HXLINE(  50)					if ((( (::Array< ::Dynamic>)(_hx_array_unsafe_get(allMoves,index)) )->length > 2)) {
HXLINE(  50)						return;
            					}
HXLINE(  52)					_gthis->putDisc(index,allMoves,null());
HXLINE(  57)					int decision = ::MinMax_obj::minimaxDecision(allMoves);
HXLINE(  58)					if ((decision == -1)) {
HXLINE(  59)						_gthis->drawIfTerminal(allMoves);
            					}
            					else {
HXLINE(  60)						if ((decision == -2)) {
HXLINE(  61)							int _g = 0;
HXDLIN(  61)							int _g1 = allMoves->length;
HXDLIN(  61)							while((_g < _g1)){
HXLINE(  61)								_g = (_g + 1);
HXDLIN(  61)								int i = (_g - 1);
HXLINE(  62)								::Array< ::Dynamic> positions = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(allMoves,i)) );
HXLINE(  63)								if ((positions->length < 3)) {
HXLINE(  64)									_gthis->putIADisc(i,allMoves);
HXLINE(  65)									goto _hx_goto_2;
            								}
            							}
            							_hx_goto_2:;
            						}
            						else {
HXLINE(  69)							_gthis->putIADisc(decision,allMoves);
            						}
            					}
HXLINE(  71)					::haxe::Log_obj::trace((HX_("decision: ",c2,d8,f4,3c) + decision),::hx::SourceInfo(HX_("Source/Main.hx",b1,67,fd,ea),71,HX_("Main",59,64,2f,33),HX_("new",60,d0,53,00)));
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(  35)				_g2 = (_g2 + 1);
HXDLIN(  35)				int i = (_g2 - 1);
HXLINE(  36)				 ::haxe::ui::components::Button btn =  ::haxe::ui::components::Button_obj::__alloc( HX_CTX );
HXLINE(  37)				btn->set_text(HX_("Soltar aqui",0f,4b,b2,14));
HXLINE(  38)				this->addChild(btn);
HXLINE(  39)				btn->set_x(this->calculateBtnPos(i,btn));
HXLINE(  40)				btn->set_y(( (Float)(20) ));
HXLINE(  41)				btn->set_styleString(HX_("\n\t\t\tbackground: #79bbff;\n\t\t\tborder: 3px solid #337bc4;\n\t\t\tborder-radius:10px;\n\t\t\tpadding:8px 10px;\n\t\t\tfont-size: 14px;\n\t\t\tcolor: #212121;",cd,0b,ad,6c));
HXLINE(  48)				btn->set_onClick( ::Dynamic(new _hx_Closure_0(_gthis,allMoves,i)));
            			}
            		}
            	}

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		if (inClassId<=(int)0x07825a7d) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x07825a7d;
			}
		} else {
			return inClassId==(int)0x0c89e854;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void Main_obj::drawIfTerminal(::Array< ::Dynamic> allMoves){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_76_drawIfTerminal)
HXLINE(  77)		Float terminalTest = ::MinMax_obj::terminalTest(allMoves);
HXLINE(  78)		if ((terminalTest != -1)) {
HXLINE(  79)			 ::openfl::display::BitmapData wireframeData = ::openfl::utils::Assets_obj::getBitmapData(HX_("assets/winMsg.png",8c,78,cd,06),null());
HXLINE(  80)			if ((terminalTest == ::Math_obj::POSITIVE_INFINITY)) {
HXLINE(  81)				wireframeData = ::openfl::utils::Assets_obj::getBitmapData(HX_("assets/loseMsg.png",db,2f,ef,a6),null());
            			}
HXLINE(  83)			 ::openfl::display::Bitmap wireframe =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,wireframeData,null(),null());
HXLINE(  84)			this->addChild(wireframe);
HXLINE(  85)			wireframe->smoothing = true;
HXLINE(  86)			wireframe->set_width(( (Float)(this->stage->stageWidth) ));
HXLINE(  87)			wireframe->set_height(( (Float)(this->stage->stageHeight) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Main_obj,drawIfTerminal,(void))

void Main_obj::putIADisc(int index,::Array< ::Dynamic> allMoves){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,allMoves, ::Main,_gthis,int,index) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_93_putIADisc)
HXLINE(  94)			::Sys_obj::sleep(( (Float)(1) ));
HXLINE(  95)			_gthis->putDisc(index,allMoves,false);
HXLINE(  96)			_gthis->drawIfTerminal(allMoves);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_91_putIADisc)
HXDLIN(  91)		 ::Main _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  93)		::sys::thread::_Thread::HaxeThread_obj::create( ::Dynamic(new _hx_Closure_0(allMoves,_gthis,index)),false);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Main_obj,putIADisc,(void))

void Main_obj::putDisc(int index,::Array< ::Dynamic> allMoves,::hx::Null< bool >  __o_userDisc){
            		bool userDisc = __o_userDisc.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_104_putDisc)
HXLINE( 105)		 ::openfl::display::BitmapData discData = ::openfl::utils::Assets_obj::getBitmapData(HX_("assets/black_disc.png",1c,6c,0b,5d),null());
HXLINE( 106)		 ::openfl::display::Bitmap disc =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,discData,null(),null());
HXLINE( 108)		if (!(userDisc)) {
HXLINE( 109)			discData = ::openfl::utils::Assets_obj::getBitmapData(HX_("assets/red_disc.png",4a,bb,b9,5e),null());
HXLINE( 110)			disc =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,discData,null(),null());
            		}
HXLINE( 113)		this->addChild(disc);
HXLINE( 114)		disc->smoothing = true;
HXLINE( 115)		Float minWidthHeight = ::Math_obj::min(( (Float)(this->stage->stageWidth) ),( (Float)(this->stage->stageHeight) ));
HXLINE( 116)		disc->set_width((minWidthHeight / ( (Float)(4) )));
HXLINE( 117)		disc->set_height((minWidthHeight / ( (Float)(4) )));
HXLINE( 118)		disc->set_x(this->calculateDiscX((index + 1),disc));
HXLINE( 119)		::motion::Actuate_obj::tween(disc,( (Float)(3) ), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("y",79,00,00,00),this->calculateDiscY((3 - ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(allMoves,index)) )->length),disc))),null(),null());
HXLINE( 120)		::Array< ::Dynamic> _hx_tmp = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(allMoves,index)) );
HXDLIN( 120)		_hx_tmp->push( ::User_obj::__alloc( HX_CTX ,userDisc));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Main_obj,putDisc,(void))

Float Main_obj::calculateDiscX(int column, ::openfl::display::Bitmap disc){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_123_calculateDiscX)
HXLINE( 124)		if ((column == 4)) {
HXLINE( 124)			Float _hx_tmp = (((( (Float)(this->stage->stageWidth) ) / ( (Float)(4) )) * ( (Float)(column) )) - (( (Float)(this->stage->stageWidth) ) / ( (Float)(8) )));
HXDLIN( 124)			return (_hx_tmp - (disc->get_width() / ( (Float)(2) )));
            		}
HXLINE( 127)		Float _hx_tmp = (((( (Float)(this->stage->stageWidth) ) / ( (Float)(4) )) * ( (Float)(column) )) - (( (Float)(this->stage->stageWidth) ) / ( (Float)(8) )));
HXDLIN( 127)		return ((_hx_tmp - (disc->get_width() / ( (Float)(2) ))) + 15);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Main_obj,calculateDiscX,return )

Float Main_obj::calculateDiscY(int line, ::openfl::display::Bitmap disc){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_131_calculateDiscY)
HXDLIN( 131)		Float _hx_tmp = ((((( (Float)((this->stage->stageHeight - 50)) ) / ( (Float)(3) )) * ( (Float)(line) )) - (( (Float)((this->stage->stageHeight - 50)) ) / ( (Float)(6) ))) + 50);
HXDLIN( 131)		return (_hx_tmp - (disc->get_height() / ( (Float)(2) )));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Main_obj,calculateDiscY,return )

Float Main_obj::calculateBtnPos(int column, ::haxe::ui::components::Button btn){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_134_calculateBtnPos)
HXLINE( 135)		if ((column == 4)) {
HXLINE( 135)			Float _hx_tmp = (((( (Float)(this->stage->stageWidth) ) / ( (Float)(4) )) * ( (Float)(column) )) - (( (Float)(this->stage->stageWidth) ) / ( (Float)(8) )));
HXDLIN( 135)			return (_hx_tmp - (btn->get_width() / ( (Float)(2) )));
            		}
HXLINE( 138)		Float _hx_tmp = (((( (Float)(this->stage->stageWidth) ) / ( (Float)(4) )) * ( (Float)(column) )) - (( (Float)(this->stage->stageWidth) ) / ( (Float)(8) )));
HXDLIN( 138)		return ((_hx_tmp - (btn->get_width() / ( (Float)(2) ))) + 15);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Main_obj,calculateBtnPos,return )


::hx::ObjectPtr< Main_obj > Main_obj::__new() {
	::hx::ObjectPtr< Main_obj > __this = new Main_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Main_obj > Main_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Main_obj *__this = (Main_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Main_obj), true, "Main"));
	*(void **)__this = Main_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Main_obj::Main_obj()
{
}

::hx::Val Main_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"putDisc") ) { return ::hx::Val( putDisc_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"putIADisc") ) { return ::hx::Val( putIADisc_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"drawIfTerminal") ) { return ::hx::Val( drawIfTerminal_dyn() ); }
		if (HX_FIELD_EQ(inName,"calculateDiscX") ) { return ::hx::Val( calculateDiscX_dyn() ); }
		if (HX_FIELD_EQ(inName,"calculateDiscY") ) { return ::hx::Val( calculateDiscY_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"calculateBtnPos") ) { return ::hx::Val( calculateBtnPos_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Main_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Main_obj_sStaticStorageInfo = 0;
#endif

static ::String Main_obj_sMemberFields[] = {
	HX_("drawIfTerminal",9d,bb,61,97),
	HX_("putIADisc",5c,87,c1,0f),
	HX_("putDisc",c4,09,e3,f0),
	HX_("calculateDiscX",1d,8c,7e,7c),
	HX_("calculateDiscY",1e,8c,7e,7c),
	HX_("calculateBtnPos",9e,4e,91,f7),
	::String(null()) };

::hx::Class Main_obj::__mClass;

void Main_obj::__register()
{
	Main_obj _hx_dummy;
	Main_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Main",59,64,2f,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Main_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Main_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

