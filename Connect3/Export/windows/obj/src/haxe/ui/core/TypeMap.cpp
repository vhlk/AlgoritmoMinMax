// Generated by Haxe 4.2.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_ui_core_TypeMap
#include <haxe/ui/core/TypeMap.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_7b09f2cf14efc678_5_addTypeInfo,"haxe.ui.core.TypeMap","addTypeInfo",0x529f8d80,"haxe.ui.core.TypeMap.addTypeInfo","haxe/ui/core/TypeMap.hx",5,0x18e6049a)
HX_LOCAL_STACK_FRAME(_hx_pos_7b09f2cf14efc678_19_getTypeInfo,"haxe.ui.core.TypeMap","getTypeInfo",0x473718f5,"haxe.ui.core.TypeMap.getTypeInfo","haxe/ui/core/TypeMap.hx",19,0x18e6049a)
HX_LOCAL_STACK_FRAME(_hx_pos_7b09f2cf14efc678_4_boot,"haxe.ui.core.TypeMap","boot",0x1416515b,"haxe.ui.core.TypeMap.boot","haxe/ui/core/TypeMap.hx",4,0x18e6049a)
namespace haxe{
namespace ui{
namespace core{

void TypeMap_obj::__construct() { }

Dynamic TypeMap_obj::__CreateEmpty() { return new TypeMap_obj; }

void *TypeMap_obj::_hx_vtable = 0;

Dynamic TypeMap_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TypeMap_obj > _hx_result = new TypeMap_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TypeMap_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x21c5fa85;
}

 ::haxe::ds::StringMap TypeMap_obj::typeInfo;

void TypeMap_obj::addTypeInfo(::String className,::String property,::String type){
            	HX_GC_STACKFRAME(&_hx_pos_7b09f2cf14efc678_5_addTypeInfo)
HXLINE(   6)		if (::hx::IsNull( ::haxe::ui::core::TypeMap_obj::typeInfo )) {
HXLINE(   7)			::haxe::ui::core::TypeMap_obj::typeInfo =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            		}
HXLINE(  10)		 ::haxe::ds::StringMap classTypeMap = ( ( ::haxe::ds::StringMap)(::haxe::ui::core::TypeMap_obj::typeInfo->get(className)) );
HXLINE(  11)		if (::hx::IsNull( classTypeMap )) {
HXLINE(  12)			classTypeMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  13)			::haxe::ui::core::TypeMap_obj::typeInfo->set(className,classTypeMap);
            		}
HXLINE(  16)		classTypeMap->set(property,type);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(TypeMap_obj,addTypeInfo,(void))

::String TypeMap_obj::getTypeInfo(::String className,::String property){
            	HX_STACKFRAME(&_hx_pos_7b09f2cf14efc678_19_getTypeInfo)
HXLINE(  20)		if (::hx::IsNull( ::haxe::ui::core::TypeMap_obj::typeInfo )) {
HXLINE(  21)			return null();
            		}
HXLINE(  24)		 ::haxe::ds::StringMap classTypeMap = ( ( ::haxe::ds::StringMap)(::haxe::ui::core::TypeMap_obj::typeInfo->get(className)) );
HXLINE(  25)		if (::hx::IsNull( classTypeMap )) {
HXLINE(  26)			return null();
            		}
HXLINE(  29)		return classTypeMap->get_string(property);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(TypeMap_obj,getTypeInfo,return )


TypeMap_obj::TypeMap_obj()
{
}

bool TypeMap_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"typeInfo") ) { outValue = ( typeInfo ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"addTypeInfo") ) { outValue = addTypeInfo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getTypeInfo") ) { outValue = getTypeInfo_dyn(); return true; }
	}
	return false;
}

bool TypeMap_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"typeInfo") ) { typeInfo=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *TypeMap_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo TypeMap_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &TypeMap_obj::typeInfo,HX_("typeInfo",48,3c,86,b2)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void TypeMap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TypeMap_obj::typeInfo,"typeInfo");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TypeMap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TypeMap_obj::typeInfo,"typeInfo");
};

#endif

::hx::Class TypeMap_obj::__mClass;

static ::String TypeMap_obj_sStaticFields[] = {
	HX_("typeInfo",48,3c,86,b2),
	HX_("addTypeInfo",89,73,e2,e3),
	HX_("getTypeInfo",fe,fe,79,d8),
	::String(null())
};

void TypeMap_obj::__register()
{
	TypeMap_obj _hx_dummy;
	TypeMap_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.core.TypeMap",e5,a3,3e,44);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TypeMap_obj::__GetStatic;
	__mClass->mSetStaticField = &TypeMap_obj::__SetStatic;
	__mClass->mMarkFunc = TypeMap_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TypeMap_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< TypeMap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TypeMap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TypeMap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TypeMap_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TypeMap_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_7b09f2cf14efc678_4_boot)
HXDLIN(   4)		typeInfo = null();
            	}
}

} // end namespace haxe
} // end namespace ui
} // end namespace core
