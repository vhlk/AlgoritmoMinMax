// Generated by Haxe 4.2.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventBase
#include <haxe/ui/backend/EventBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventImpl
#include <haxe/ui/backend/EventImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Box
#include <haxe/ui/containers/Box.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Splitter
#include <haxe/ui/containers/Splitter.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_SplitterEvents
#include <haxe/ui/containers/SplitterEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_containers__VerticalSplitter_VerticalSplitterEvents
#include <haxe/ui/containers/_VerticalSplitter/VerticalSplitterEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IDirectionalComponent
#include <haxe/ui/core/IDirectionalComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_events_Events
#include <haxe/ui/events/Events.h>
#endif
#ifndef INCLUDED_haxe_ui_events_MouseEvent
#include <haxe/ui/events/MouseEvent.h>
#endif
#ifndef INCLUDED_haxe_ui_events_UIEvent
#include <haxe/ui/events/UIEvent.h>
#endif
#ifndef INCLUDED_haxe_ui_geom_Point
#include <haxe/ui/geom/Point.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_ILayout
#include <haxe/ui/layouts/ILayout.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_Layout
#include <haxe/ui/layouts/Layout.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <haxe/ui/validation/IValidating.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_96ed2522a80c14e6_20_new,"haxe.ui.containers._VerticalSplitter.VerticalSplitterEvents","new",0x88d650c4,"haxe.ui.containers._VerticalSplitter.VerticalSplitterEvents.new","haxe/ui/containers/VerticalSplitter.hx",20,0x97f4c056)
HX_LOCAL_STACK_FRAME(_hx_pos_96ed2522a80c14e6_22_onGripperMouseDown,"haxe.ui.containers._VerticalSplitter.VerticalSplitterEvents","onGripperMouseDown",0x3c2c3db7,"haxe.ui.containers._VerticalSplitter.VerticalSplitterEvents.onGripperMouseDown","haxe/ui/containers/VerticalSplitter.hx",22,0x97f4c056)
HX_LOCAL_STACK_FRAME(_hx_pos_96ed2522a80c14e6_28_handleResize,"haxe.ui.containers._VerticalSplitter.VerticalSplitterEvents","handleResize",0x06ebd2d8,"haxe.ui.containers._VerticalSplitter.VerticalSplitterEvents.handleResize","haxe/ui/containers/VerticalSplitter.hx",28,0x97f4c056)
namespace haxe{
namespace ui{
namespace containers{
namespace _VerticalSplitter{

void VerticalSplitterEvents_obj::__construct( ::haxe::ui::containers::Splitter splitter){
            	HX_STACKFRAME(&_hx_pos_96ed2522a80c14e6_20_new)
HXDLIN(  20)		super::__construct(splitter);
            	}

Dynamic VerticalSplitterEvents_obj::__CreateEmpty() { return new VerticalSplitterEvents_obj; }

void *VerticalSplitterEvents_obj::_hx_vtable = 0;

Dynamic VerticalSplitterEvents_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< VerticalSplitterEvents_obj > _hx_result = new VerticalSplitterEvents_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool VerticalSplitterEvents_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x51675034) {
		if (inClassId<=(int)0x0548a7cc) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0548a7cc;
		} else {
			return inClassId==(int)0x51675034;
		}
	} else {
		return inClassId==(int)0x7607e63e;
	}
}

void VerticalSplitterEvents_obj::onGripperMouseDown( ::haxe::ui::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_96ed2522a80c14e6_22_onGripperMouseDown)
HXDLIN(  22)		this->super::onGripperMouseDown(event);
            	}


void VerticalSplitterEvents_obj::handleResize( ::haxe::ui::core::Component prev, ::haxe::ui::core::Component next, ::haxe::ui::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_96ed2522a80c14e6_28_handleResize)
HXLINE(  29)		Float delta = (event->screenY - this->_currentOffset->y);
HXLINE(  30)		Float prevCY = prev->set_height((prev->get_height() + delta));
HXLINE(  31)		Float nextCY = next->set_height((next->get_height() - delta));
HXLINE(  32)		Float ucy = this->_splitter->get_layout()->get_usableHeight();
HXLINE(  33)		if (::hx::IsNotNull( prev->get_percentHeight() )) {
HXLINE(  34)			prev->set_percentHeight(((prevCY / ucy) * ( (Float)(100) )));
            		}
            		else {
HXLINE(  36)			prev->set_height(prevCY);
            		}
HXLINE(  39)		if (::hx::IsNotNull( next->get_percentHeight() )) {
HXLINE(  40)			next->set_percentHeight(((nextCY / ucy) * ( (Float)(100) )));
            		}
            		else {
HXLINE(  42)			next->set_height(nextCY);
            		}
            	}



::hx::ObjectPtr< VerticalSplitterEvents_obj > VerticalSplitterEvents_obj::__new( ::haxe::ui::containers::Splitter splitter) {
	::hx::ObjectPtr< VerticalSplitterEvents_obj > __this = new VerticalSplitterEvents_obj();
	__this->__construct(splitter);
	return __this;
}

::hx::ObjectPtr< VerticalSplitterEvents_obj > VerticalSplitterEvents_obj::__alloc(::hx::Ctx *_hx_ctx, ::haxe::ui::containers::Splitter splitter) {
	VerticalSplitterEvents_obj *__this = (VerticalSplitterEvents_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(VerticalSplitterEvents_obj), true, "haxe.ui.containers._VerticalSplitter.VerticalSplitterEvents"));
	*(void **)__this = VerticalSplitterEvents_obj::_hx_vtable;
	__this->__construct(splitter);
	return __this;
}

VerticalSplitterEvents_obj::VerticalSplitterEvents_obj()
{
}

::hx::Val VerticalSplitterEvents_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"handleResize") ) { return ::hx::Val( handleResize_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"onGripperMouseDown") ) { return ::hx::Val( onGripperMouseDown_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *VerticalSplitterEvents_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *VerticalSplitterEvents_obj_sStaticStorageInfo = 0;
#endif

static ::String VerticalSplitterEvents_obj_sMemberFields[] = {
	HX_("onGripperMouseDown",9b,ad,0e,ff),
	HX_("handleResize",bc,7f,a7,56),
	::String(null()) };

::hx::Class VerticalSplitterEvents_obj::__mClass;

void VerticalSplitterEvents_obj::__register()
{
	VerticalSplitterEvents_obj _hx_dummy;
	VerticalSplitterEvents_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.containers._VerticalSplitter.VerticalSplitterEvents",d2,de,ad,30);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(VerticalSplitterEvents_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< VerticalSplitterEvents_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VerticalSplitterEvents_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VerticalSplitterEvents_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace containers
} // end namespace _VerticalSplitter
