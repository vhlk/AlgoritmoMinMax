// Generated by Haxe 4.2.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Box
#include <haxe/ui/containers/Box.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Splitter
#include <haxe/ui/containers/Splitter.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_SplitterBuilder
#include <haxe/ui/containers/SplitterBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_containers__HorizontalSplitter_HorizontalSplitterBuilder
#include <haxe/ui/containers/_HorizontalSplitter/HorizontalSplitterBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_CompositeBuilder
#include <haxe/ui/core/CompositeBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IDirectionalComponent
#include <haxe/ui/core/IDirectionalComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <haxe/ui/validation/IValidating.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_83b5168d127d8d69_52_new,"haxe.ui.containers._HorizontalSplitter.HorizontalSplitterBuilder","new",0x8c3202b4,"haxe.ui.containers._HorizontalSplitter.HorizontalSplitterBuilder.new","haxe/ui/containers/HorizontalSplitter.hx",52,0x92d8d9e8)
HX_LOCAL_STACK_FRAME(_hx_pos_83b5168d127d8d69_54_getSplitterClass,"haxe.ui.containers._HorizontalSplitter.HorizontalSplitterBuilder","getSplitterClass",0xb4af8227,"haxe.ui.containers._HorizontalSplitter.HorizontalSplitterBuilder.getSplitterClass","haxe/ui/containers/HorizontalSplitter.hx",54,0x92d8d9e8)
namespace haxe{
namespace ui{
namespace containers{
namespace _HorizontalSplitter{

void HorizontalSplitterBuilder_obj::__construct( ::haxe::ui::containers::Splitter splitter){
            	HX_STACKFRAME(&_hx_pos_83b5168d127d8d69_52_new)
HXDLIN(  52)		super::__construct(splitter);
            	}

Dynamic HorizontalSplitterBuilder_obj::__CreateEmpty() { return new HorizontalSplitterBuilder_obj; }

void *HorizontalSplitterBuilder_obj::_hx_vtable = 0;

Dynamic HorizontalSplitterBuilder_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< HorizontalSplitterBuilder_obj > _hx_result = new HorizontalSplitterBuilder_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool HorizontalSplitterBuilder_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x22d44d84) {
		if (inClassId<=(int)0x0472fd8d) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0472fd8d;
		} else {
			return inClassId==(int)0x22d44d84;
		}
	} else {
		return inClassId==(int)0x72efb9d6;
	}
}

::String HorizontalSplitterBuilder_obj::getSplitterClass(){
            	HX_STACKFRAME(&_hx_pos_83b5168d127d8d69_54_getSplitterClass)
HXDLIN(  54)		return HX_("horizontal-splitter-gripper",ce,9f,30,83);
            	}



::hx::ObjectPtr< HorizontalSplitterBuilder_obj > HorizontalSplitterBuilder_obj::__new( ::haxe::ui::containers::Splitter splitter) {
	::hx::ObjectPtr< HorizontalSplitterBuilder_obj > __this = new HorizontalSplitterBuilder_obj();
	__this->__construct(splitter);
	return __this;
}

::hx::ObjectPtr< HorizontalSplitterBuilder_obj > HorizontalSplitterBuilder_obj::__alloc(::hx::Ctx *_hx_ctx, ::haxe::ui::containers::Splitter splitter) {
	HorizontalSplitterBuilder_obj *__this = (HorizontalSplitterBuilder_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(HorizontalSplitterBuilder_obj), true, "haxe.ui.containers._HorizontalSplitter.HorizontalSplitterBuilder"));
	*(void **)__this = HorizontalSplitterBuilder_obj::_hx_vtable;
	__this->__construct(splitter);
	return __this;
}

HorizontalSplitterBuilder_obj::HorizontalSplitterBuilder_obj()
{
}

::hx::Val HorizontalSplitterBuilder_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 16:
		if (HX_FIELD_EQ(inName,"getSplitterClass") ) { return ::hx::Val( getSplitterClass_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *HorizontalSplitterBuilder_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *HorizontalSplitterBuilder_obj_sStaticStorageInfo = 0;
#endif

static ::String HorizontalSplitterBuilder_obj_sMemberFields[] = {
	HX_("getSplitterClass",fb,98,25,18),
	::String(null()) };

::hx::Class HorizontalSplitterBuilder_obj::__mClass;

void HorizontalSplitterBuilder_obj::__register()
{
	HorizontalSplitterBuilder_obj _hx_dummy;
	HorizontalSplitterBuilder_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.containers._HorizontalSplitter.HorizontalSplitterBuilder",c2,d8,ed,31);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(HorizontalSplitterBuilder_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< HorizontalSplitterBuilder_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HorizontalSplitterBuilder_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HorizontalSplitterBuilder_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace containers
} // end namespace _HorizontalSplitter
