// Generated by Haxe 4.2.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_Behaviour
#include <haxe/ui/behaviours/Behaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_Behaviours
#include <haxe/ui/behaviours/Behaviours.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_DataBehaviour
#include <haxe/ui/behaviours/DataBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_ValueBehaviour
#include <haxe/ui/behaviours/ValueBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_binding_BindingManager
#include <haxe/ui/binding/BindingManager.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Box
#include <haxe/ui/containers/Box.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Frame
#include <haxe/ui/containers/Frame.h>
#endif
#ifndef INCLUDED_haxe_ui_containers__Frame_Builder
#include <haxe/ui/containers/_Frame/Builder.h>
#endif
#ifndef INCLUDED_haxe_ui_containers__Frame_IconBehaviour
#include <haxe/ui/containers/_Frame/IconBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_containers__Frame_Layout
#include <haxe/ui/containers/_Frame/Layout.h>
#endif
#ifndef INCLUDED_haxe_ui_containers__Frame_TextBehaviour
#include <haxe/ui/containers/_Frame/TextBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_CompositeBuilder
#include <haxe/ui/core/CompositeBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_DefaultLayout
#include <haxe/ui/layouts/DefaultLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_ILayout
#include <haxe/ui/layouts/ILayout.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_Layout
#include <haxe/ui/layouts/Layout.h>
#endif
#ifndef INCLUDED_haxe_ui_util_VariantType
#include <haxe/ui/util/VariantType.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <haxe/ui/validation/IValidating.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_df1455cfee242a62_12_new,"haxe.ui.containers.Frame","new",0xa9c93435,"haxe.ui.containers.Frame.new","haxe/ui/containers/Frame.hx",12,0x566bdf3c)
HX_LOCAL_STACK_FRAME(_hx_pos_05d894374734d0ec_369_registerBehaviours,"haxe.ui.containers.Frame","registerBehaviours",0xd18bdba4,"haxe.ui.containers.Frame.registerBehaviours","haxe/ui/macros/Macros.hx",369,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_05d894374734d0ec_495_get_value,"haxe.ui.containers.Frame","get_value",0x8adf4d5d,"haxe.ui.containers.Frame.get_value","haxe/ui/macros/Macros.hx",495,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_05d894374734d0ec_498_set_value,"haxe.ui.containers.Frame","set_value",0x6e303969,"haxe.ui.containers.Frame.set_value","haxe/ui/macros/Macros.hx",498,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_439a5545dbed48a6_525_cloneComponent,"haxe.ui.containers.Frame","cloneComponent",0xf2ac9beb,"haxe.ui.containers.Frame.cloneComponent","haxe/ui/macros/helpers/ClassBuilder.hx",525,0x8cdaad7b)
HX_LOCAL_STACK_FRAME(_hx_pos_05d894374734d0ec_351_self,"haxe.ui.containers.Frame","self",0xe9928217,"haxe.ui.containers.Frame.self","haxe/ui/macros/Macros.hx",351,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_05d894374734d0ec_71_registerComposite,"haxe.ui.containers.Frame","registerComposite",0xaed873b9,"haxe.ui.containers.Frame.registerComposite","haxe/ui/macros/Macros.hx",71,0x27866361)
namespace haxe{
namespace ui{
namespace containers{

void Frame_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_df1455cfee242a62_12_new)
HXDLIN(  12)		super::__construct();
            	}

Dynamic Frame_obj::__CreateEmpty() { return new Frame_obj; }

void *Frame_obj::_hx_vtable = 0;

Dynamic Frame_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Frame_obj > _hx_result = new Frame_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Frame_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0f2dd418) {
			if (inClassId<=(int)0x0330636f) {
				if (inClassId<=(int)0x01557b4b) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x01557b4b;
				} else {
					return inClassId==(int)0x0330636f;
				}
			} else {
				return inClassId==(int)0x0c89e854 || inClassId==(int)0x0f2dd418;
			}
		} else {
			if (inClassId<=(int)0x17740271) {
				if (inClassId<=(int)0x13d76ae7) {
					return inClassId==(int)0x1395e371 || inClassId==(int)0x13d76ae7;
				} else {
					return inClassId==(int)0x17740271;
				}
			} else {
				return inClassId==(int)0x1f4df417;
			}
		}
	} else {
		if (inClassId<=(int)0x6b353933) {
			if (inClassId<=(int)0x2ccba775) {
				if (inClassId<=(int)0x241b0321) {
					return inClassId==(int)0x241810fb || inClassId==(int)0x241b0321;
				} else {
					return inClassId==(int)0x2ccba775;
				}
			} else {
				return inClassId==(int)0x4af7dd8e || inClassId==(int)0x6b353933;
			}
		} else {
			if (inClassId<=(int)0x72c347e4) {
				return inClassId==(int)0x715d6dae || inClassId==(int)0x72c347e4;
			} else {
				return inClassId==(int)0x7ec24579;
			}
		}
	}
}

void Frame_obj::registerBehaviours(){
            	HX_STACKFRAME(&_hx_pos_05d894374734d0ec_369_registerBehaviours)
HXLINE( 370)		this->super::registerBehaviours();
HXLINE( 447)		this->behaviours->_hx_register(HX_("text",ad,cc,f9,4c),::hx::ClassOf< ::haxe::ui::containers::_Frame::TextBehaviour >(),null());
HXDLIN( 447)		this->behaviours->_hx_register(HX_("icon",79,e7,b2,45),::hx::ClassOf< ::haxe::ui::containers::_Frame::IconBehaviour >(),null());
            	}


 ::Dynamic Frame_obj::get_value(){
            	HX_STACKFRAME(&_hx_pos_05d894374734d0ec_495_get_value)
HXDLIN( 495)		return this->get_text();
            	}


 ::Dynamic Frame_obj::set_value( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_05d894374734d0ec_498_set_value)
HXLINE( 499)		this->set_text(( (::String)(value) ));
HXLINE( 500)		::haxe::ui::binding::BindingManager_obj::get_instance()->componentPropChanged(::hx::ObjectPtr<OBJ_>(this),HX_("text",ad,cc,f9,4c));
HXLINE( 501)		return value;
            	}


 ::haxe::ui::core::ComponentContainer Frame_obj::cloneComponent(){
            	HX_STACKFRAME(&_hx_pos_439a5545dbed48a6_525_cloneComponent)
HXLINE( 300)		 ::haxe::ui::containers::Frame c = ( ( ::haxe::ui::containers::Frame)(this->super::cloneComponent()) );
HXLINE( 316)		::Array< ::Dynamic> _hx_tmp;
HXDLIN( 316)		if (::hx::IsNull( this->_children )) {
HXLINE( 316)			_hx_tmp = ::Array_obj< ::Dynamic>::__new(0);
            		}
            		else {
HXLINE( 316)			_hx_tmp = this->_children;
            		}
HXDLIN( 316)		::Array< ::Dynamic> _hx_tmp1;
HXDLIN( 316)		if (::hx::IsNull( c->_children )) {
HXLINE( 316)			_hx_tmp1 = ::Array_obj< ::Dynamic>::__new(0);
            		}
            		else {
HXLINE( 316)			_hx_tmp1 = c->_children;
            		}
HXDLIN( 316)		if ((_hx_tmp->length != _hx_tmp1->length)) {
HXLINE( 317)			int _g = 0;
HXDLIN( 317)			::Array< ::Dynamic> _g1;
HXDLIN( 317)			if (::hx::IsNull( this->_children )) {
HXLINE( 317)				_g1 = ::Array_obj< ::Dynamic>::__new(0);
            			}
            			else {
HXLINE( 317)				_g1 = this->_children;
            			}
HXDLIN( 317)			while((_g < _g1->length)){
HXLINE( 317)				 ::haxe::ui::core::Component child = _g1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN( 317)				_g = (_g + 1);
HXLINE( 318)				c->addComponent(Dynamic( child->cloneComponent()).StaticCast<  ::haxe::ui::core::Component >());
            			}
            		}
HXLINE( 322)		::haxe::ui::binding::BindingManager_obj::get_instance()->cloneBinding(( ( ::haxe::ui::core::Component)(::hx::ObjectPtr<OBJ_>(this)) ),( ( ::haxe::ui::core::Component)(c) ));
HXLINE( 323)		return c;
            	}


 ::haxe::ui::core::ComponentContainer Frame_obj::self(){
            	HX_GC_STACKFRAME(&_hx_pos_05d894374734d0ec_351_self)
HXDLIN( 351)		return  ::haxe::ui::containers::Frame_obj::__alloc( HX_CTX );
            	}


void Frame_obj::registerComposite(){
            	HX_STACKFRAME(&_hx_pos_05d894374734d0ec_71_registerComposite)
HXLINE(  72)		this->super::registerComposite();
HXLINE(  84)		this->_compositeBuilderClass = ::hx::ClassOf< ::haxe::ui::containers::_Frame::Builder >();
HXLINE(  88)		this->_defaultLayoutClass = ::hx::ClassOf< ::haxe::ui::containers::_Frame::Layout >();
            	}



::hx::ObjectPtr< Frame_obj > Frame_obj::__new() {
	::hx::ObjectPtr< Frame_obj > __this = new Frame_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Frame_obj > Frame_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Frame_obj *__this = (Frame_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Frame_obj), true, "haxe.ui.containers.Frame"));
	*(void **)__this = Frame_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Frame_obj::Frame_obj()
{
}

::hx::Val Frame_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"self") ) { return ::hx::Val( self_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_value") ) { return ::hx::Val( get_value_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_value") ) { return ::hx::Val( set_value_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"cloneComponent") ) { return ::hx::Val( cloneComponent_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"registerComposite") ) { return ::hx::Val( registerComposite_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"registerBehaviours") ) { return ::hx::Val( registerBehaviours_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Frame_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Frame_obj_sStaticStorageInfo = 0;
#endif

static ::String Frame_obj_sMemberFields[] = {
	HX_("registerBehaviours",d9,a7,67,34),
	HX_("get_value",c8,db,61,75),
	HX_("set_value",d4,c7,b2,58),
	HX_("cloneComponent",a0,e9,56,26),
	HX_("self",8c,8b,50,4c),
	HX_("registerComposite",24,e5,7f,fe),
	::String(null()) };

::hx::Class Frame_obj::__mClass;

void Frame_obj::__register()
{
	Frame_obj _hx_dummy;
	Frame_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.containers.Frame",c3,f5,4b,96);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Frame_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Frame_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Frame_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Frame_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace containers
