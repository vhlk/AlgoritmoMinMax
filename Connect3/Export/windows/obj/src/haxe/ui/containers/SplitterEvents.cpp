// Generated by Haxe 4.2.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventBase
#include <haxe/ui/backend/EventBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventImpl
#include <haxe/ui/backend/EventImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ScreenBase
#include <haxe/ui/backend/ScreenBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ScreenImpl
#include <haxe/ui/backend/ScreenImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Box
#include <haxe/ui/containers/Box.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Splitter
#include <haxe/ui/containers/Splitter.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_SplitterBuilder
#include <haxe/ui/containers/SplitterBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_SplitterEvents
#include <haxe/ui/containers/SplitterEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_containers__Splitter_SizerGripper
#include <haxe/ui/containers/_Splitter/SizerGripper.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_CompositeBuilder
#include <haxe/ui/core/CompositeBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IDirectionalComponent
#include <haxe/ui/core/IDirectionalComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_core_InteractiveComponent
#include <haxe/ui/core/InteractiveComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Screen
#include <haxe/ui/core/Screen.h>
#endif
#ifndef INCLUDED_haxe_ui_events_Events
#include <haxe/ui/events/Events.h>
#endif
#ifndef INCLUDED_haxe_ui_events_MouseEvent
#include <haxe/ui/events/MouseEvent.h>
#endif
#ifndef INCLUDED_haxe_ui_events_UIEvent
#include <haxe/ui/events/UIEvent.h>
#endif
#ifndef INCLUDED_haxe_ui_focus_IFocusable
#include <haxe/ui/focus/IFocusable.h>
#endif
#ifndef INCLUDED_haxe_ui_geom_Point
#include <haxe/ui/geom/Point.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <haxe/ui/validation/IValidating.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c630a78d94d91fa1_22_new,"haxe.ui.containers.SplitterEvents","new",0xf295e75c,"haxe.ui.containers.SplitterEvents.new","haxe/ui/containers/Splitter.hx",22,0xb1b4002c)
HX_LOCAL_STACK_FRAME(_hx_pos_c630a78d94d91fa1_30_register,"haxe.ui.containers.SplitterEvents","register",0x0afcbde7,"haxe.ui.containers.SplitterEvents.register","haxe/ui/containers/Splitter.hx",30,0xb1b4002c)
HX_LOCAL_STACK_FRAME(_hx_pos_c630a78d94d91fa1_38_unregister,"haxe.ui.containers.SplitterEvents","unregister",0xb3d88e40,"haxe.ui.containers.SplitterEvents.unregister","haxe/ui/containers/Splitter.hx",38,0xb1b4002c)
HX_LOCAL_STACK_FRAME(_hx_pos_c630a78d94d91fa1_48_onGripperMouseDown,"haxe.ui.containers.SplitterEvents","onGripperMouseDown",0x1dfdd21f,"haxe.ui.containers.SplitterEvents.onGripperMouseDown","haxe/ui/containers/Splitter.hx",48,0xb1b4002c)
HX_LOCAL_STACK_FRAME(_hx_pos_c630a78d94d91fa1_55_onScreenMouseMove,"haxe.ui.containers.SplitterEvents","onScreenMouseMove",0xecba0c67,"haxe.ui.containers.SplitterEvents.onScreenMouseMove","haxe/ui/containers/Splitter.hx",55,0xb1b4002c)
HX_LOCAL_STACK_FRAME(_hx_pos_c630a78d94d91fa1_66_handleResize,"haxe.ui.containers.SplitterEvents","handleResize",0xbbc0a940,"haxe.ui.containers.SplitterEvents.handleResize","haxe/ui/containers/Splitter.hx",66,0xb1b4002c)
HX_LOCAL_STACK_FRAME(_hx_pos_c630a78d94d91fa1_70_onScreenMouseUp,"haxe.ui.containers.SplitterEvents","onScreenMouseUp",0x66a76e31,"haxe.ui.containers.SplitterEvents.onScreenMouseUp","haxe/ui/containers/Splitter.hx",70,0xb1b4002c)
namespace haxe{
namespace ui{
namespace containers{

void SplitterEvents_obj::__construct( ::haxe::ui::containers::Splitter splitter){
            	HX_STACKFRAME(&_hx_pos_c630a78d94d91fa1_22_new)
HXLINE(  47)		this->_currentOffset = null();
HXLINE(  46)		this->_currentGripper = null();
HXLINE(  26)		super::__construct(splitter);
HXLINE(  27)		this->_splitter = splitter;
            	}

Dynamic SplitterEvents_obj::__CreateEmpty() { return new SplitterEvents_obj; }

void *SplitterEvents_obj::_hx_vtable = 0;

Dynamic SplitterEvents_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SplitterEvents_obj > _hx_result = new SplitterEvents_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SplitterEvents_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0548a7cc) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0548a7cc;
	} else {
		return inClassId==(int)0x51675034;
	}
}

void SplitterEvents_obj::_hx_register(){
            	HX_STACKFRAME(&_hx_pos_c630a78d94d91fa1_30_register)
HXLINE(  31)		 ::haxe::ui::containers::SplitterBuilder builder = ::hx::TCast<  ::haxe::ui::containers::SplitterBuilder >::cast(this->_splitter->_compositeBuilder);
HXLINE(  32)		 ::haxe::ui::containers::Splitter grippers = this->_splitter;
HXDLIN(  32)		::Array< ::Dynamic> grippers1 = grippers->findComponents(builder->getSplitterClass(),::hx::ClassOf< ::haxe::ui::core::Component >(),1);
HXLINE(  33)		{
HXLINE(  33)			int _g = 0;
HXDLIN(  33)			while((_g < grippers1->length)){
HXLINE(  33)				 ::haxe::ui::core::Component g = grippers1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN(  33)				_g = (_g + 1);
HXLINE(  34)				g->registerEvent(HX_("mousedown",07,85,e9,03),this->onGripperMouseDown_dyn(),null());
            			}
            		}
            	}


void SplitterEvents_obj::unregister(){
            	HX_STACKFRAME(&_hx_pos_c630a78d94d91fa1_38_unregister)
HXLINE(  39)		 ::haxe::ui::containers::SplitterBuilder builder = ::hx::TCast<  ::haxe::ui::containers::SplitterBuilder >::cast(this->_splitter->_compositeBuilder);
HXLINE(  40)		 ::haxe::ui::containers::Splitter grippers = this->_splitter;
HXDLIN(  40)		::Array< ::Dynamic> grippers1 = grippers->findComponents(builder->getSplitterClass(),::hx::ClassOf< ::haxe::ui::core::Component >(),1);
HXLINE(  41)		{
HXLINE(  41)			int _g = 0;
HXDLIN(  41)			while((_g < grippers1->length)){
HXLINE(  41)				 ::haxe::ui::core::Component g = grippers1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN(  41)				_g = (_g + 1);
HXLINE(  42)				g->unregisterEvent(HX_("mousedown",07,85,e9,03),this->onGripperMouseDown_dyn());
            			}
            		}
            	}


void SplitterEvents_obj::onGripperMouseDown( ::haxe::ui::events::MouseEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_c630a78d94d91fa1_48_onGripperMouseDown)
HXLINE(  49)		this->_currentGripper = ::hx::TCast<  ::haxe::ui::containers::_Splitter::SizerGripper >::cast(event->target);
HXLINE(  50)		this->_currentOffset =  ::haxe::ui::geom::Point_obj::__alloc( HX_CTX ,event->screenX,event->screenY);
HXLINE(  51)		::haxe::ui::core::Screen_obj::get_instance()->registerEvent(HX_("mousemove",b6,6f,dc,09),this->onScreenMouseMove_dyn(),null());
HXLINE(  52)		::haxe::ui::core::Screen_obj::get_instance()->registerEvent(HX_("mouseup",c0,0f,73,c0),this->onScreenMouseUp_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(SplitterEvents_obj,onGripperMouseDown,(void))

void SplitterEvents_obj::onScreenMouseMove( ::haxe::ui::events::MouseEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_c630a78d94d91fa1_55_onScreenMouseMove)
HXLINE(  56)		this->_currentGripper->addClass(HX_(":hover",42,d3,17,5c),null(),null());
HXLINE(  57)		int index = this->_splitter->getComponentIndex(this->_currentGripper);
HXLINE(  58)		 ::haxe::ui::core::Component prev = this->_splitter->getComponentAt((index - 1));
HXLINE(  59)		 ::haxe::ui::core::Component next = this->_splitter->getComponentAt((index + 1));
HXLINE(  61)		this->handleResize(prev,next,event);
HXLINE(  63)		this->_currentOffset =  ::haxe::ui::geom::Point_obj::__alloc( HX_CTX ,event->screenX,event->screenY);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SplitterEvents_obj,onScreenMouseMove,(void))

void SplitterEvents_obj::handleResize( ::haxe::ui::core::Component prev, ::haxe::ui::core::Component next, ::haxe::ui::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_c630a78d94d91fa1_66_handleResize)
            	}


HX_DEFINE_DYNAMIC_FUNC3(SplitterEvents_obj,handleResize,(void))

void SplitterEvents_obj::onScreenMouseUp( ::haxe::ui::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_c630a78d94d91fa1_70_onScreenMouseUp)
HXLINE(  71)		::haxe::ui::core::Screen_obj::get_instance()->unregisterEvent(HX_("mousemove",b6,6f,dc,09),this->onScreenMouseMove_dyn());
HXLINE(  72)		::haxe::ui::core::Screen_obj::get_instance()->unregisterEvent(HX_("mouseup",c0,0f,73,c0),this->onScreenMouseUp_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(SplitterEvents_obj,onScreenMouseUp,(void))


::hx::ObjectPtr< SplitterEvents_obj > SplitterEvents_obj::__new( ::haxe::ui::containers::Splitter splitter) {
	::hx::ObjectPtr< SplitterEvents_obj > __this = new SplitterEvents_obj();
	__this->__construct(splitter);
	return __this;
}

::hx::ObjectPtr< SplitterEvents_obj > SplitterEvents_obj::__alloc(::hx::Ctx *_hx_ctx, ::haxe::ui::containers::Splitter splitter) {
	SplitterEvents_obj *__this = (SplitterEvents_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SplitterEvents_obj), true, "haxe.ui.containers.SplitterEvents"));
	*(void **)__this = SplitterEvents_obj::_hx_vtable;
	__this->__construct(splitter);
	return __this;
}

SplitterEvents_obj::SplitterEvents_obj()
{
}

void SplitterEvents_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SplitterEvents);
	HX_MARK_MEMBER_NAME(_splitter,"_splitter");
	HX_MARK_MEMBER_NAME(_currentGripper,"_currentGripper");
	HX_MARK_MEMBER_NAME(_currentOffset,"_currentOffset");
	 ::haxe::ui::events::Events_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SplitterEvents_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_splitter,"_splitter");
	HX_VISIT_MEMBER_NAME(_currentGripper,"_currentGripper");
	HX_VISIT_MEMBER_NAME(_currentOffset,"_currentOffset");
	 ::haxe::ui::events::Events_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val SplitterEvents_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"register") ) { return ::hx::Val( _hx_register_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_splitter") ) { return ::hx::Val( _splitter ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"unregister") ) { return ::hx::Val( unregister_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"handleResize") ) { return ::hx::Val( handleResize_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_currentOffset") ) { return ::hx::Val( _currentOffset ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_currentGripper") ) { return ::hx::Val( _currentGripper ); }
		if (HX_FIELD_EQ(inName,"onScreenMouseUp") ) { return ::hx::Val( onScreenMouseUp_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"onScreenMouseMove") ) { return ::hx::Val( onScreenMouseMove_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"onGripperMouseDown") ) { return ::hx::Val( onGripperMouseDown_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SplitterEvents_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"_splitter") ) { _splitter=inValue.Cast<  ::haxe::ui::containers::Splitter >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_currentOffset") ) { _currentOffset=inValue.Cast<  ::haxe::ui::geom::Point >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_currentGripper") ) { _currentGripper=inValue.Cast<  ::haxe::ui::containers::_Splitter::SizerGripper >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SplitterEvents_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_splitter",a6,2e,46,1b));
	outFields->push(HX_("_currentGripper",b1,ca,36,66));
	outFields->push(HX_("_currentOffset",ed,08,ee,81));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SplitterEvents_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ui::containers::Splitter */ ,(int)offsetof(SplitterEvents_obj,_splitter),HX_("_splitter",a6,2e,46,1b)},
	{::hx::fsObject /*  ::haxe::ui::containers::_Splitter::SizerGripper */ ,(int)offsetof(SplitterEvents_obj,_currentGripper),HX_("_currentGripper",b1,ca,36,66)},
	{::hx::fsObject /*  ::haxe::ui::geom::Point */ ,(int)offsetof(SplitterEvents_obj,_currentOffset),HX_("_currentOffset",ed,08,ee,81)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SplitterEvents_obj_sStaticStorageInfo = 0;
#endif

static ::String SplitterEvents_obj_sMemberFields[] = {
	HX_("_splitter",a6,2e,46,1b),
	HX_("register",63,a6,9f,d0),
	HX_("unregister",bc,8d,63,56),
	HX_("_currentGripper",b1,ca,36,66),
	HX_("_currentOffset",ed,08,ee,81),
	HX_("onGripperMouseDown",9b,ad,0e,ff),
	HX_("onScreenMouseMove",6b,34,8c,03),
	HX_("handleResize",bc,7f,a7,56),
	HX_("onScreenMouseUp",35,cd,20,e5),
	::String(null()) };

::hx::Class SplitterEvents_obj::__mClass;

void SplitterEvents_obj::__register()
{
	SplitterEvents_obj _hx_dummy;
	SplitterEvents_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.containers.SplitterEvents",6a,49,08,67);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SplitterEvents_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SplitterEvents_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SplitterEvents_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SplitterEvents_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace containers
