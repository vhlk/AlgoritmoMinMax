// Generated by Haxe 4.2.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventBase
#include <haxe/ui/backend/EventBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventImpl
#include <haxe/ui/backend/EventImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Box
#include <haxe/ui/containers/Box.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Splitter
#include <haxe/ui/containers/Splitter.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_SplitterBuilder
#include <haxe/ui/containers/SplitterBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_containers__Splitter_SizerGripper
#include <haxe/ui/containers/_Splitter/SizerGripper.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_CompositeBuilder
#include <haxe/ui/core/CompositeBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IDirectionalComponent
#include <haxe/ui/core/IDirectionalComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_core_InteractiveComponent
#include <haxe/ui/core/InteractiveComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_events_UIEvent
#include <haxe/ui/events/UIEvent.h>
#endif
#ifndef INCLUDED_haxe_ui_focus_IFocusable
#include <haxe/ui/focus/IFocusable.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <haxe/ui/validation/IValidating.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_864d6d52ce248af3_87_new,"haxe.ui.containers.SplitterBuilder","new",0xb1b1a59c,"haxe.ui.containers.SplitterBuilder.new","haxe/ui/containers/Splitter.hx",87,0xb1b4002c)
HX_LOCAL_STACK_FRAME(_hx_pos_864d6d52ce248af3_93_addComponent,"haxe.ui.containers.SplitterBuilder","addComponent",0xd0dbb5a0,"haxe.ui.containers.SplitterBuilder.addComponent","haxe/ui/containers/Splitter.hx",93,0xb1b4002c)
HX_LOCAL_STACK_FRAME(_hx_pos_864d6d52ce248af3_115_getSplitterClass,"haxe.ui.containers.SplitterBuilder","getSplitterClass",0xe7a62e3f,"haxe.ui.containers.SplitterBuilder.getSplitterClass","haxe/ui/containers/Splitter.hx",115,0xb1b4002c)
HX_LOCAL_STACK_FRAME(_hx_pos_864d6d52ce248af3_118_onComponentShown,"haxe.ui.containers.SplitterBuilder","onComponentShown",0xa704dd97,"haxe.ui.containers.SplitterBuilder.onComponentShown","haxe/ui/containers/Splitter.hx",118,0xb1b4002c)
HX_LOCAL_STACK_FRAME(_hx_pos_864d6d52ce248af3_140_onComponentHidden,"haxe.ui.containers.SplitterBuilder","onComponentHidden",0xa362d7e4,"haxe.ui.containers.SplitterBuilder.onComponentHidden","haxe/ui/containers/Splitter.hx",140,0xb1b4002c)
namespace haxe{
namespace ui{
namespace containers{

void SplitterBuilder_obj::__construct( ::haxe::ui::containers::Splitter splitter){
            	HX_STACKFRAME(&_hx_pos_864d6d52ce248af3_87_new)
HXLINE(  88)		super::__construct(splitter);
HXLINE(  89)		this->_splitter = splitter;
            	}

Dynamic SplitterBuilder_obj::__CreateEmpty() { return new SplitterBuilder_obj; }

void *SplitterBuilder_obj::_hx_vtable = 0;

Dynamic SplitterBuilder_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SplitterBuilder_obj > _hx_result = new SplitterBuilder_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SplitterBuilder_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0472fd8d) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0472fd8d;
	} else {
		return inClassId==(int)0x22d44d84;
	}
}

 ::haxe::ui::core::Component SplitterBuilder_obj::addComponent( ::haxe::ui::core::Component child){
            	HX_GC_STACKFRAME(&_hx_pos_864d6d52ce248af3_93_addComponent)
HXLINE(  94)		bool _hx_tmp;
HXDLIN(  94)		 ::haxe::ui::containers::Splitter _this = this->_splitter;
HXDLIN(  94)		::Array< ::Dynamic> _hx_tmp1;
HXDLIN(  94)		if (::hx::IsNull( _this->_children )) {
HXLINE(  94)			_hx_tmp1 = ::Array_obj< ::Dynamic>::__new(0);
            		}
            		else {
HXLINE(  94)			_hx_tmp1 = _this->_children;
            		}
HXDLIN(  94)		if ((_hx_tmp1->length > 0)) {
HXLINE(  94)			_hx_tmp = (child->hasClass(this->getSplitterClass()) == false);
            		}
            		else {
HXLINE(  94)			_hx_tmp = false;
            		}
HXDLIN(  94)		if (_hx_tmp) {
HXLINE(  95)			 ::haxe::ui::containers::_Splitter::SizerGripper gripper =  ::haxe::ui::containers::_Splitter::SizerGripper_obj::__alloc( HX_CTX );
HXLINE(  96)			gripper->set_id(this->getSplitterClass());
HXLINE(  97)			gripper->addClass(this->getSplitterClass(),null(),null());
HXLINE(  98)			this->_splitter->addComponent(gripper);
HXLINE(  99)			this->_splitter->registerInternalEvents(null(),true);
            		}
HXLINE( 102)		if ((child->hasClass(this->getSplitterClass()) == false)) {
HXLINE( 103)			child->registerEvent(HX_("shown",d1,88,27,7c),this->onComponentShown_dyn(),null());
HXLINE( 104)			child->registerEvent(HX_("hidden",6a,ff,95,4c),this->onComponentHidden_dyn(),null());
            		}
HXLINE( 107)		if ((child->get_hidden() == true)) {
HXLINE( 108)			this->onComponentHidden(null());
            		}
HXLINE( 111)		return null();
            	}


::String SplitterBuilder_obj::getSplitterClass(){
            	HX_STACKFRAME(&_hx_pos_864d6d52ce248af3_115_getSplitterClass)
HXDLIN( 115)		return HX_("splitter-gripper",05,73,53,7f);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SplitterBuilder_obj,getSplitterClass,return )

void SplitterBuilder_obj::onComponentShown( ::haxe::ui::events::UIEvent e){
            	HX_STACKFRAME(&_hx_pos_864d6d52ce248af3_118_onComponentShown)
HXLINE( 119)		 ::haxe::ui::containers::Splitter _this = this->_splitter;
HXDLIN( 119)		::Array< ::Dynamic> children;
HXDLIN( 119)		if (::hx::IsNull( _this->_children )) {
HXLINE( 119)			children = ::Array_obj< ::Dynamic>::__new(0);
            		}
            		else {
HXLINE( 119)			children = _this->_children;
            		}
HXDLIN( 119)		::Array< ::Dynamic> children1 = children->copy();
HXLINE( 120)		{
HXLINE( 120)			int _g = 0;
HXDLIN( 120)			while((_g < children1->length)){
HXLINE( 120)				 ::haxe::ui::core::Component c = children1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN( 120)				_g = (_g + 1);
HXLINE( 121)				if ((c->get_hidden() == true)) {
HXLINE( 122)					if (::Std_obj::isOfType(c,::hx::ClassOf< ::haxe::ui::containers::_Splitter::SizerGripper >())) {
HXLINE( 123)						c->show();
            					}
HXLINE( 125)					goto _hx_goto_3;
            				}
            			}
            			_hx_goto_3:;
            		}
HXLINE( 129)		children1->reverse();
HXLINE( 130)		{
HXLINE( 130)			int _g1 = 0;
HXDLIN( 130)			while((_g1 < children1->length)){
HXLINE( 130)				 ::haxe::ui::core::Component c = children1->__get(_g1).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN( 130)				_g1 = (_g1 + 1);
HXLINE( 131)				if ((c->get_hidden() == true)) {
HXLINE( 132)					if (::Std_obj::isOfType(c,::hx::ClassOf< ::haxe::ui::containers::_Splitter::SizerGripper >())) {
HXLINE( 133)						c->show();
            					}
HXLINE( 135)					goto _hx_goto_4;
            				}
            			}
            			_hx_goto_4:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SplitterBuilder_obj,onComponentShown,(void))

void SplitterBuilder_obj::onComponentHidden( ::haxe::ui::events::UIEvent e){
            	HX_STACKFRAME(&_hx_pos_864d6d52ce248af3_140_onComponentHidden)
HXLINE( 141)		 ::haxe::ui::containers::Splitter _this = this->_splitter;
HXDLIN( 141)		::Array< ::Dynamic> children;
HXDLIN( 141)		if (::hx::IsNull( _this->_children )) {
HXLINE( 141)			children = ::Array_obj< ::Dynamic>::__new(0);
            		}
            		else {
HXLINE( 141)			children = _this->_children;
            		}
HXDLIN( 141)		::Array< ::Dynamic> children1 = children->copy();
HXLINE( 142)		{
HXLINE( 142)			int _g = 0;
HXDLIN( 142)			while((_g < children1->length)){
HXLINE( 142)				 ::haxe::ui::core::Component c = children1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN( 142)				_g = (_g + 1);
HXLINE( 143)				if ((c->get_hidden() == false)) {
HXLINE( 144)					if (::Std_obj::isOfType(c,::hx::ClassOf< ::haxe::ui::containers::_Splitter::SizerGripper >())) {
HXLINE( 145)						c->hide();
            					}
HXLINE( 147)					goto _hx_goto_6;
            				}
            			}
            			_hx_goto_6:;
            		}
HXLINE( 151)		children1->reverse();
HXLINE( 152)		{
HXLINE( 152)			int _g1 = 0;
HXDLIN( 152)			while((_g1 < children1->length)){
HXLINE( 152)				 ::haxe::ui::core::Component c = children1->__get(_g1).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN( 152)				_g1 = (_g1 + 1);
HXLINE( 153)				if ((c->get_hidden() == false)) {
HXLINE( 154)					if (::Std_obj::isOfType(c,::hx::ClassOf< ::haxe::ui::containers::_Splitter::SizerGripper >())) {
HXLINE( 155)						c->hide();
            					}
HXLINE( 157)					goto _hx_goto_7;
            				}
            			}
            			_hx_goto_7:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SplitterBuilder_obj,onComponentHidden,(void))


::hx::ObjectPtr< SplitterBuilder_obj > SplitterBuilder_obj::__new( ::haxe::ui::containers::Splitter splitter) {
	::hx::ObjectPtr< SplitterBuilder_obj > __this = new SplitterBuilder_obj();
	__this->__construct(splitter);
	return __this;
}

::hx::ObjectPtr< SplitterBuilder_obj > SplitterBuilder_obj::__alloc(::hx::Ctx *_hx_ctx, ::haxe::ui::containers::Splitter splitter) {
	SplitterBuilder_obj *__this = (SplitterBuilder_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SplitterBuilder_obj), true, "haxe.ui.containers.SplitterBuilder"));
	*(void **)__this = SplitterBuilder_obj::_hx_vtable;
	__this->__construct(splitter);
	return __this;
}

SplitterBuilder_obj::SplitterBuilder_obj()
{
}

void SplitterBuilder_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SplitterBuilder);
	HX_MARK_MEMBER_NAME(_splitter,"_splitter");
	 ::haxe::ui::core::CompositeBuilder_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SplitterBuilder_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_splitter,"_splitter");
	 ::haxe::ui::core::CompositeBuilder_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val SplitterBuilder_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"_splitter") ) { return ::hx::Val( _splitter ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addComponent") ) { return ::hx::Val( addComponent_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getSplitterClass") ) { return ::hx::Val( getSplitterClass_dyn() ); }
		if (HX_FIELD_EQ(inName,"onComponentShown") ) { return ::hx::Val( onComponentShown_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"onComponentHidden") ) { return ::hx::Val( onComponentHidden_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SplitterBuilder_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"_splitter") ) { _splitter=inValue.Cast<  ::haxe::ui::containers::Splitter >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SplitterBuilder_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_splitter",a6,2e,46,1b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SplitterBuilder_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ui::containers::Splitter */ ,(int)offsetof(SplitterBuilder_obj,_splitter),HX_("_splitter",a6,2e,46,1b)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SplitterBuilder_obj_sStaticStorageInfo = 0;
#endif

static ::String SplitterBuilder_obj_sMemberFields[] = {
	HX_("_splitter",a6,2e,46,1b),
	HX_("addComponent",5c,12,a8,0e),
	HX_("getSplitterClass",fb,98,25,18),
	HX_("onComponentShown",53,48,84,d7),
	HX_("onComponentHidden",a8,d1,60,e2),
	::String(null()) };

::hx::Class SplitterBuilder_obj::__mClass;

void SplitterBuilder_obj::__register()
{
	SplitterBuilder_obj _hx_dummy;
	SplitterBuilder_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.containers.SplitterBuilder",aa,e7,57,29);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SplitterBuilder_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SplitterBuilder_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SplitterBuilder_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SplitterBuilder_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace containers
