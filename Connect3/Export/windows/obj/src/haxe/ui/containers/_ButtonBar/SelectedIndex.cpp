// Generated by Haxe 4.2.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventBase
#include <haxe/ui/backend/EventBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventImpl
#include <haxe/ui/backend/EventImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_Behaviour
#include <haxe/ui/behaviours/Behaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_DataBehaviour
#include <haxe/ui/behaviours/DataBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_ValueBehaviour
#include <haxe/ui/behaviours/ValueBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_components_Button
#include <haxe/ui/components/Button.h>
#endif
#ifndef INCLUDED_haxe_ui_containers__ButtonBar_Builder
#include <haxe/ui/containers/_ButtonBar/Builder.h>
#endif
#ifndef INCLUDED_haxe_ui_containers__ButtonBar_SelectedIndex
#include <haxe/ui/containers/_ButtonBar/SelectedIndex.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_CompositeBuilder
#include <haxe/ui/core/CompositeBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_core_InteractiveComponent
#include <haxe/ui/core/InteractiveComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_events_UIEvent
#include <haxe/ui/events/UIEvent.h>
#endif
#ifndef INCLUDED_haxe_ui_focus_IFocusable
#include <haxe/ui/focus/IFocusable.h>
#endif
#ifndef INCLUDED_haxe_ui_util_VariantType
#include <haxe/ui/util/VariantType.h>
#endif
#ifndef INCLUDED_haxe_ui_util__Variant_Variant_Impl_
#include <haxe/ui/util/_Variant/Variant_Impl_.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <haxe/ui/validation/IValidating.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8f1b011585fa02b3_24_new,"haxe.ui.containers._ButtonBar.SelectedIndex","new",0x1059cb47,"haxe.ui.containers._ButtonBar.SelectedIndex.new","haxe/ui/containers/ButtonBar.hx",24,0x521d2a68)
HX_LOCAL_STACK_FRAME(_hx_pos_8f1b011585fa02b3_25_validateData,"haxe.ui.containers._ButtonBar.SelectedIndex","validateData",0x1a004619,"haxe.ui.containers._ButtonBar.SelectedIndex.validateData","haxe/ui/containers/ButtonBar.hx",25,0x521d2a68)
namespace haxe{
namespace ui{
namespace containers{
namespace _ButtonBar{

void SelectedIndex_obj::__construct( ::haxe::ui::core::Component component){
            	HX_STACKFRAME(&_hx_pos_8f1b011585fa02b3_24_new)
HXDLIN(  24)		super::__construct(component);
            	}

Dynamic SelectedIndex_obj::__CreateEmpty() { return new SelectedIndex_obj; }

void *SelectedIndex_obj::_hx_vtable = 0;

Dynamic SelectedIndex_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SelectedIndex_obj > _hx_result = new SelectedIndex_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SelectedIndex_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3c5dd90d) {
		if (inClassId<=(int)0x37b9aa84) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x37b9aa84;
		} else {
			return inClassId==(int)0x3c5dd90d;
		}
	} else {
		return inClassId==(int)0x4a162369 || inClassId==(int)0x7e17fa9f;
	}
}

void SelectedIndex_obj::validateData(){
            	HX_GC_STACKFRAME(&_hx_pos_8f1b011585fa02b3_25_validateData)
HXLINE(  26)		 ::haxe::ui::containers::_ButtonBar::Builder builder = ::hx::TCast<  ::haxe::ui::containers::_ButtonBar::Builder >::cast(this->_component->_compositeBuilder);
HXLINE(  27)		 ::haxe::ui::components::Button currentButton = builder->_currentButton;
HXLINE(  28)		 ::haxe::ui::core::Component button = this->_component;
HXDLIN(  28)		 ::haxe::ui::components::Button button1 = ::hx::TCast<  ::haxe::ui::components::Button >::cast(button->getComponentAt(( (int)(::haxe::ui::util::_Variant::Variant_Impl__obj::toInt(this->_value)) )));
HXLINE(  29)		if (::hx::IsInstanceEq( currentButton,button1 )) {
HXLINE(  30)			return;
            		}
HXLINE(  33)		if (::hx::IsNotNull( currentButton )) {
HXLINE(  34)			builder->_currentButton->set_selected(false);
            		}
HXLINE(  37)		button1->set_selected(true);
HXLINE(  38)		builder->_currentButton = button1;
HXLINE(  40)		 ::haxe::ui::core::Component _hx_tmp = this->_component;
HXDLIN(  40)		_hx_tmp->dispatch( ::haxe::ui::events::UIEvent_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),null(),null()));
            	}



::hx::ObjectPtr< SelectedIndex_obj > SelectedIndex_obj::__new( ::haxe::ui::core::Component component) {
	::hx::ObjectPtr< SelectedIndex_obj > __this = new SelectedIndex_obj();
	__this->__construct(component);
	return __this;
}

::hx::ObjectPtr< SelectedIndex_obj > SelectedIndex_obj::__alloc(::hx::Ctx *_hx_ctx, ::haxe::ui::core::Component component) {
	SelectedIndex_obj *__this = (SelectedIndex_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SelectedIndex_obj), true, "haxe.ui.containers._ButtonBar.SelectedIndex"));
	*(void **)__this = SelectedIndex_obj::_hx_vtable;
	__this->__construct(component);
	return __this;
}

SelectedIndex_obj::SelectedIndex_obj()
{
}

::hx::Val SelectedIndex_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"validateData") ) { return ::hx::Val( validateData_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *SelectedIndex_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *SelectedIndex_obj_sStaticStorageInfo = 0;
#endif

static ::String SelectedIndex_obj_sMemberFields[] = {
	HX_("validateData",e0,55,63,96),
	::String(null()) };

::hx::Class SelectedIndex_obj::__mClass;

void SelectedIndex_obj::__register()
{
	SelectedIndex_obj _hx_dummy;
	SelectedIndex_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.containers._ButtonBar.SelectedIndex",d5,1b,1b,d2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SelectedIndex_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SelectedIndex_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SelectedIndex_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SelectedIndex_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace containers
} // end namespace _ButtonBar
