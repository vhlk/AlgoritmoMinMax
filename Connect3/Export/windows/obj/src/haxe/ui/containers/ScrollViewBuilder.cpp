// Generated by Haxe 4.2.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_components_HorizontalScroll
#include <haxe/ui/components/HorizontalScroll.h>
#endif
#ifndef INCLUDED_haxe_ui_components_Scroll
#include <haxe/ui/components/Scroll.h>
#endif
#ifndef INCLUDED_haxe_ui_components_VerticalScroll
#include <haxe/ui/components/VerticalScroll.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Box
#include <haxe/ui/containers/Box.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_ScrollView
#include <haxe/ui/containers/ScrollView.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_ScrollViewBuilder
#include <haxe/ui/containers/ScrollViewBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_CompositeBuilder
#include <haxe/ui/core/CompositeBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IDirectionalComponent
#include <haxe/ui/core/IDirectionalComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_core_InteractiveComponent
#include <haxe/ui/core/InteractiveComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_focus_IFocusable
#include <haxe/ui/focus/IFocusable.h>
#endif
#ifndef INCLUDED_haxe_ui_geom_Rectangle
#include <haxe/ui/geom/Rectangle.h>
#endif
#ifndef INCLUDED_haxe_ui_geom_Size
#include <haxe/ui/geom/Size.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_ILayout
#include <haxe/ui/layouts/ILayout.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_Layout
#include <haxe/ui/layouts/Layout.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_LayoutFactory
#include <haxe/ui/layouts/LayoutFactory.h>
#endif
#ifndef INCLUDED_haxe_ui_styles_Style
#include <haxe/ui/styles/Style.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <haxe/ui/validation/IValidating.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_23283b2891872f10_830_new,"haxe.ui.containers.ScrollViewBuilder","new",0xf0805b31,"haxe.ui.containers.ScrollViewBuilder.new","haxe/ui/containers/ScrollView.hx",830,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_840_create,"haxe.ui.containers.ScrollViewBuilder","create",0xb0fab4cb,"haxe.ui.containers.ScrollViewBuilder.create","haxe/ui/containers/ScrollView.hx",840,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_848_destroy,"haxe.ui.containers.ScrollViewBuilder","destroy",0x3d7ef44b,"haxe.ui.containers.ScrollViewBuilder.destroy","haxe/ui/containers/ScrollView.hx",848,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_852_get_numComponents,"haxe.ui.containers.ScrollViewBuilder","get_numComponents",0xe5ddece4,"haxe.ui.containers.ScrollViewBuilder.get_numComponents","haxe/ui/containers/ScrollView.hx",852,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_855_addComponent,"haxe.ui.containers.ScrollViewBuilder","addComponent",0xda66256b,"haxe.ui.containers.ScrollViewBuilder.addComponent","haxe/ui/containers/ScrollView.hx",855,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_862_addComponentAt,"haxe.ui.containers.ScrollViewBuilder","addComponentAt",0xdc4acf3e,"haxe.ui.containers.ScrollViewBuilder.addComponentAt","haxe/ui/containers/ScrollView.hx",862,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_869_removeComponent,"haxe.ui.containers.ScrollViewBuilder","removeComponent",0x886c8c2a,"haxe.ui.containers.ScrollViewBuilder.removeComponent","haxe/ui/containers/ScrollView.hx",869,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_877_removeComponentAt,"haxe.ui.containers.ScrollViewBuilder","removeComponentAt",0xe5c7a3bd,"haxe.ui.containers.ScrollViewBuilder.removeComponentAt","haxe/ui/containers/ScrollView.hx",877,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_881_getComponentIndex,"haxe.ui.containers.ScrollViewBuilder","getComponentIndex",0x2a4672dc,"haxe.ui.containers.ScrollViewBuilder.getComponentIndex","haxe/ui/containers/ScrollView.hx",881,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_884_setComponentIndex,"haxe.ui.containers.ScrollViewBuilder","setComponentIndex",0x4db44ae8,"haxe.ui.containers.ScrollViewBuilder.setComponentIndex","haxe/ui/containers/ScrollView.hx",884,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_892_getComponentAt,"haxe.ui.containers.ScrollViewBuilder","getComponentAt",0xce121ae9,"haxe.ui.containers.ScrollViewBuilder.getComponentAt","haxe/ui/containers/ScrollView.hx",892,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_896_createContentContainer,"haxe.ui.containers.ScrollViewBuilder","createContentContainer",0xdb7eefb3,"haxe.ui.containers.ScrollViewBuilder.createContentContainer","haxe/ui/containers/ScrollView.hx",896,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_907_horizontalConstraintModifier,"haxe.ui.containers.ScrollViewBuilder","horizontalConstraintModifier",0xdb3147e7,"haxe.ui.containers.ScrollViewBuilder.horizontalConstraintModifier","haxe/ui/containers/ScrollView.hx",907,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_911_verticalConstraintModifier,"haxe.ui.containers.ScrollViewBuilder","verticalConstraintModifier",0xd28ea239,"haxe.ui.containers.ScrollViewBuilder.verticalConstraintModifier","haxe/ui/containers/ScrollView.hx",911,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_915_checkScrolls,"haxe.ui.containers.ScrollViewBuilder","checkScrolls",0xea1cfeed,"haxe.ui.containers.ScrollViewBuilder.checkScrolls","haxe/ui/containers/ScrollView.hx",915,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_964_createHScroll,"haxe.ui.containers.ScrollViewBuilder","createHScroll",0xc386fd0a,"haxe.ui.containers.ScrollViewBuilder.createHScroll","haxe/ui/containers/ScrollView.hx",964,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_994_createVScroll,"haxe.ui.containers.ScrollViewBuilder","createVScroll",0x09b37b98,"haxe.ui.containers.ScrollViewBuilder.createVScroll","haxe/ui/containers/ScrollView.hx",994,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1024_destroyHScroll,"haxe.ui.containers.ScrollViewBuilder","destroyHScroll",0x92d1ad8a,"haxe.ui.containers.ScrollViewBuilder.destroyHScroll","haxe/ui/containers/ScrollView.hx",1024,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1032_destroyVScroll,"haxe.ui.containers.ScrollViewBuilder","destroyVScroll",0xd8fe2c18,"haxe.ui.containers.ScrollViewBuilder.destroyVScroll","haxe/ui/containers/ScrollView.hx",1032,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1039_updateScrollRect,"haxe.ui.containers.ScrollViewBuilder","updateScrollRect",0x1618f1c9,"haxe.ui.containers.ScrollViewBuilder.updateScrollRect","haxe/ui/containers/ScrollView.hx",1039,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1082_get_virtualHorizontal,"haxe.ui.containers.ScrollViewBuilder","get_virtualHorizontal",0xe8f950b7,"haxe.ui.containers.ScrollViewBuilder.get_virtualHorizontal","haxe/ui/containers/ScrollView.hx",1082,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1087_get_virtualVertical,"haxe.ui.containers.ScrollViewBuilder","get_virtualVertical",0x4e806589,"haxe.ui.containers.ScrollViewBuilder.get_virtualVertical","haxe/ui/containers/ScrollView.hx",1087,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1090_onVirtualChanged,"haxe.ui.containers.ScrollViewBuilder","onVirtualChanged",0x5de33637,"haxe.ui.containers.ScrollViewBuilder.onVirtualChanged","haxe/ui/containers/ScrollView.hx",1090,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1095_applyStyle,"haxe.ui.containers.ScrollViewBuilder","applyStyle",0xc0770232,"haxe.ui.containers.ScrollViewBuilder.applyStyle","haxe/ui/containers/ScrollView.hx",1095,0x01b76681)
namespace haxe{
namespace ui{
namespace containers{

void ScrollViewBuilder_obj::__construct( ::haxe::ui::containers::ScrollView scrollview){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_830_new)
HXLINE(1094)		this->autoHideScrolls = false;
HXLINE( 836)		super::__construct(scrollview);
HXLINE( 837)		this->_scrollview = scrollview;
            	}

Dynamic ScrollViewBuilder_obj::__CreateEmpty() { return new ScrollViewBuilder_obj; }

void *ScrollViewBuilder_obj::_hx_vtable = 0;

Dynamic ScrollViewBuilder_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ScrollViewBuilder_obj > _hx_result = new ScrollViewBuilder_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ScrollViewBuilder_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0472fd8d) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0472fd8d;
	} else {
		return inClassId==(int)0x17e93bfd;
	}
}

void ScrollViewBuilder_obj::create(){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_840_create)
HXLINE( 841)		::String contentLayoutName = this->_scrollview->get_contentLayoutName();
HXLINE( 842)		if (::hx::IsNull( contentLayoutName )) {
HXLINE( 843)			contentLayoutName = HX_("vertical",76,bc,15,6a);
            		}
HXLINE( 845)		this->createContentContainer(contentLayoutName);
            	}


void ScrollViewBuilder_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_848_destroy)
            	}


 ::Dynamic ScrollViewBuilder_obj::get_numComponents(){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_852_get_numComponents)
HXDLIN( 852)		return this->_contents->get_numComponents();
            	}


 ::haxe::ui::core::Component ScrollViewBuilder_obj::addComponent( ::haxe::ui::core::Component child){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_855_addComponent)
HXLINE( 856)		bool _hx_tmp;
HXDLIN( 856)		bool _hx_tmp1;
HXDLIN( 856)		if ((::Std_obj::isOfType(child,::hx::ClassOf< ::haxe::ui::components::HorizontalScroll >()) == false)) {
HXLINE( 856)			_hx_tmp1 = (::Std_obj::isOfType(child,::hx::ClassOf< ::haxe::ui::components::VerticalScroll >()) == false);
            		}
            		else {
HXLINE( 856)			_hx_tmp1 = false;
            		}
HXDLIN( 856)		if (_hx_tmp1) {
HXLINE( 856)			_hx_tmp = (child->hasClass(HX_("scrollview-contents",15,b7,70,a7)) == false);
            		}
            		else {
HXLINE( 856)			_hx_tmp = false;
            		}
HXDLIN( 856)		if (_hx_tmp) {
HXLINE( 857)			return this->_contents->addComponent(child);
            		}
HXLINE( 859)		return null();
            	}


 ::haxe::ui::core::Component ScrollViewBuilder_obj::addComponentAt( ::haxe::ui::core::Component child,int index){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_862_addComponentAt)
HXLINE( 863)		bool _hx_tmp;
HXDLIN( 863)		bool _hx_tmp1;
HXDLIN( 863)		if ((::Std_obj::isOfType(child,::hx::ClassOf< ::haxe::ui::components::HorizontalScroll >()) == false)) {
HXLINE( 863)			_hx_tmp1 = (::Std_obj::isOfType(child,::hx::ClassOf< ::haxe::ui::components::VerticalScroll >()) == false);
            		}
            		else {
HXLINE( 863)			_hx_tmp1 = false;
            		}
HXDLIN( 863)		if (_hx_tmp1) {
HXLINE( 863)			_hx_tmp = (child->hasClass(HX_("scrollview-contents",15,b7,70,a7)) == false);
            		}
            		else {
HXLINE( 863)			_hx_tmp = false;
            		}
HXDLIN( 863)		if (_hx_tmp) {
HXLINE( 864)			return this->_contents->addComponentAt(child,index);
            		}
HXLINE( 866)		return null();
            	}


 ::haxe::ui::core::Component ScrollViewBuilder_obj::removeComponent( ::haxe::ui::core::Component child,::hx::Null< bool >  __o_dispose,::hx::Null< bool >  __o_invalidate){
            		bool dispose = __o_dispose.Default(true);
            		bool invalidate = __o_invalidate.Default(true);
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_869_removeComponent)
HXLINE( 870)		bool _hx_tmp;
HXDLIN( 870)		bool _hx_tmp1;
HXDLIN( 870)		if ((::Std_obj::isOfType(child,::hx::ClassOf< ::haxe::ui::components::HorizontalScroll >()) == false)) {
HXLINE( 870)			_hx_tmp1 = (::Std_obj::isOfType(child,::hx::ClassOf< ::haxe::ui::components::VerticalScroll >()) == false);
            		}
            		else {
HXLINE( 870)			_hx_tmp1 = false;
            		}
HXDLIN( 870)		if (_hx_tmp1) {
HXLINE( 870)			_hx_tmp = (child->hasClass(HX_("scrollview-contents",15,b7,70,a7)) == false);
            		}
            		else {
HXLINE( 870)			_hx_tmp = false;
            		}
HXDLIN( 870)		if (_hx_tmp) {
HXLINE( 871)			return this->_contents->removeComponent(child,dispose,invalidate);
            		}
HXLINE( 873)		return null();
            	}


 ::haxe::ui::core::Component ScrollViewBuilder_obj::removeComponentAt(int index,::hx::Null< bool >  __o_dispose,::hx::Null< bool >  __o_invalidate){
            		bool dispose = __o_dispose.Default(true);
            		bool invalidate = __o_invalidate.Default(true);
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_877_removeComponentAt)
HXDLIN( 877)		return this->_contents->removeComponentAt(index,dispose,invalidate);
            	}


int ScrollViewBuilder_obj::getComponentIndex( ::haxe::ui::core::Component child){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_881_getComponentIndex)
HXDLIN( 881)		return this->_contents->getComponentIndex(child);
            	}


 ::haxe::ui::core::Component ScrollViewBuilder_obj::setComponentIndex( ::haxe::ui::core::Component child,int index){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_884_setComponentIndex)
HXLINE( 885)		bool _hx_tmp;
HXDLIN( 885)		bool _hx_tmp1;
HXDLIN( 885)		if ((::Std_obj::isOfType(child,::hx::ClassOf< ::haxe::ui::components::HorizontalScroll >()) == false)) {
HXLINE( 885)			_hx_tmp1 = (::Std_obj::isOfType(child,::hx::ClassOf< ::haxe::ui::components::VerticalScroll >()) == false);
            		}
            		else {
HXLINE( 885)			_hx_tmp1 = false;
            		}
HXDLIN( 885)		if (_hx_tmp1) {
HXLINE( 885)			_hx_tmp = (child->hasClass(HX_("scrollview-contents",15,b7,70,a7)) == false);
            		}
            		else {
HXLINE( 885)			_hx_tmp = false;
            		}
HXDLIN( 885)		if (_hx_tmp) {
HXLINE( 886)			return this->_contents->setComponentIndex(child,index);
            		}
HXLINE( 888)		return null();
            	}


 ::haxe::ui::core::Component ScrollViewBuilder_obj::getComponentAt(int index){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_892_getComponentAt)
HXDLIN( 892)		return this->_contents->getComponentAt(index);
            	}


void ScrollViewBuilder_obj::createContentContainer(::String layoutName){
            	HX_GC_STACKFRAME(&_hx_pos_23283b2891872f10_896_createContentContainer)
HXDLIN( 896)		if (::hx::IsNull( this->_contents )) {
HXLINE( 897)			this->_contents =  ::haxe::ui::containers::Box_obj::__alloc( HX_CTX );
HXLINE( 898)			this->_contents->addClass(HX_("scrollview-contents",15,b7,70,a7),null(),null());
HXLINE( 899)			this->_contents->set_id(HX_("scrollview-contents",15,b7,70,a7));
HXLINE( 900)			 ::haxe::ui::containers::Box _hx_tmp = this->_contents;
HXDLIN( 900)			_hx_tmp->set_layout(::haxe::ui::layouts::LayoutFactory_obj::createFromName(layoutName));
HXLINE( 901)			this->_component->addComponent(this->_contents);
HXLINE( 902)			this->_contentsLayoutName = layoutName;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ScrollViewBuilder_obj,createContentContainer,(void))

Float ScrollViewBuilder_obj::horizontalConstraintModifier(){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_907_horizontalConstraintModifier)
HXDLIN( 907)		return ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollViewBuilder_obj,horizontalConstraintModifier,return )

Float ScrollViewBuilder_obj::verticalConstraintModifier(){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_911_verticalConstraintModifier)
HXDLIN( 911)		return ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollViewBuilder_obj,verticalConstraintModifier,return )

void ScrollViewBuilder_obj::checkScrolls(){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_915_checkScrolls)
HXLINE( 916)		if ((this->_component->get_isNativeScroller() == true)) {
HXLINE( 917)			return;
            		}
HXLINE( 920)		 ::haxe::ui::geom::Size usableSize = this->_component->get_layout()->get_usableSize();
HXLINE( 922)		bool _hx_tmp;
HXDLIN( 922)		if ((this->get_virtualHorizontal() == false)) {
HXLINE( 922)			_hx_tmp = (usableSize->width > 0);
            		}
            		else {
HXLINE( 922)			_hx_tmp = false;
            		}
HXDLIN( 922)		if (_hx_tmp) {
HXLINE( 923)			 ::haxe::ui::containers::Box horizontalConstraint = this->_contents;
HXLINE( 924)			 ::haxe::ui::components::HorizontalScroll hscroll = this->_component->findComponent(null(),::hx::ClassOf< ::haxe::ui::components::HorizontalScroll >(),false,null()).StaticCast<  ::haxe::ui::components::HorizontalScroll >();
HXLINE( 925)			Float vcw = horizontalConstraint->get_width();
HXDLIN( 925)			Float vcw1 = (vcw + this->horizontalConstraintModifier());
HXLINE( 926)			if ((vcw1 > usableSize->width)) {
HXLINE( 927)				if (::hx::IsNull( hscroll )) {
HXLINE( 928)					hscroll = this->createHScroll();
            				}
HXLINE( 931)				hscroll->set_max((vcw1 - usableSize->width));
HXLINE( 932)				Float _hx_tmp = (usableSize->width / vcw1);
HXDLIN( 932)				hscroll->set_pageSize((_hx_tmp * hscroll->get_max()));
HXLINE( 934)				hscroll->syncComponentValidation(null());
            			}
            			else {
HXLINE( 936)				if (::hx::IsNotNull( hscroll )) {
HXLINE( 937)					this->destroyHScroll();
            				}
            			}
            		}
HXLINE( 942)		bool _hx_tmp1;
HXDLIN( 942)		if ((this->get_virtualVertical() == false)) {
HXLINE( 942)			_hx_tmp1 = (usableSize->height > 0);
            		}
            		else {
HXLINE( 942)			_hx_tmp1 = false;
            		}
HXDLIN( 942)		if (_hx_tmp1) {
HXLINE( 943)			 ::haxe::ui::containers::Box verticalConstraint = this->_contents;
HXLINE( 944)			 ::haxe::ui::components::VerticalScroll vscroll = this->_component->findComponent(null(),::hx::ClassOf< ::haxe::ui::components::VerticalScroll >(),false,null()).StaticCast<  ::haxe::ui::components::VerticalScroll >();
HXLINE( 945)			Float vch = verticalConstraint->get_height();
HXDLIN( 945)			Float vch1 = (vch + this->verticalConstraintModifier());
HXLINE( 946)			if ((vch1 > usableSize->height)) {
HXLINE( 947)				if (::hx::IsNull( vscroll )) {
HXLINE( 948)					vscroll = this->createVScroll();
            				}
HXLINE( 951)				vscroll->set_max((vch1 - usableSize->height));
HXLINE( 952)				Float _hx_tmp = (usableSize->height / vch1);
HXDLIN( 952)				vscroll->set_pageSize((_hx_tmp * vscroll->get_max()));
HXLINE( 954)				vscroll->syncComponentValidation(null());
            			}
            			else {
HXLINE( 956)				if (::hx::IsNotNull( vscroll )) {
HXLINE( 957)					this->destroyVScroll();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollViewBuilder_obj,checkScrolls,(void))

 ::haxe::ui::components::HorizontalScroll ScrollViewBuilder_obj::createHScroll(){
            	HX_GC_STACKFRAME(&_hx_pos_23283b2891872f10_964_createHScroll)
HXLINE( 965)		if ((this->_component->get_isNativeScroller() == true)) {
HXLINE( 966)			return null();
            		}
HXLINE( 969)		 ::haxe::ui::geom::Size usableSize = this->_component->get_layout()->get_usableSize();
HXLINE( 970)		 ::haxe::ui::containers::Box horizontalConstraint = this->_contents;
HXLINE( 971)		 ::haxe::ui::components::HorizontalScroll hscroll = this->_component->findComponent(null(),::hx::ClassOf< ::haxe::ui::components::HorizontalScroll >(),false,null()).StaticCast<  ::haxe::ui::components::HorizontalScroll >();
HXLINE( 972)		Float vcw = horizontalConstraint->get_width();
HXDLIN( 972)		Float vcw1 = (vcw + this->horizontalConstraintModifier());
HXLINE( 974)		if ((usableSize->width <= 0)) {
HXLINE( 975)			return hscroll;
            		}
HXLINE( 978)		bool _hx_tmp;
HXDLIN( 978)		if ((vcw1 > usableSize->width)) {
HXLINE( 978)			_hx_tmp = ::hx::IsNull( hscroll );
            		}
            		else {
HXLINE( 978)			_hx_tmp = false;
            		}
HXDLIN( 978)		if (_hx_tmp) {
HXLINE( 979)			 ::haxe::ui::containers::ScrollViewBuilder builder = ::hx::TCast<  ::haxe::ui::containers::ScrollViewBuilder >::cast(this->_scrollview->_compositeBuilder);
HXLINE( 980)			hscroll =  ::haxe::ui::components::HorizontalScroll_obj::__alloc( HX_CTX );
HXLINE( 981)			hscroll->set_includeInLayout(!(builder->autoHideScrolls));
HXLINE( 982)			hscroll->set_hidden(builder->autoHideScrolls);
HXLINE( 983)			hscroll->set_percentWidth(100);
HXLINE( 984)			hscroll->set_allowFocus(false);
HXLINE( 985)			hscroll->set_id(HX_("scrollview-hscroll",da,fc,19,11));
HXLINE( 986)			this->_component->addComponent(hscroll);
HXLINE( 987)			this->_component->registerInternalEvents(null(),true);
            		}
HXLINE( 990)		return hscroll;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollViewBuilder_obj,createHScroll,return )

 ::haxe::ui::components::VerticalScroll ScrollViewBuilder_obj::createVScroll(){
            	HX_GC_STACKFRAME(&_hx_pos_23283b2891872f10_994_createVScroll)
HXLINE( 995)		if ((this->_component->get_isNativeScroller() == true)) {
HXLINE( 996)			return null();
            		}
HXLINE( 999)		 ::haxe::ui::geom::Size usableSize = this->_component->get_layout()->get_usableSize();
HXLINE(1000)		 ::haxe::ui::containers::Box verticalConstraint = this->_contents;
HXLINE(1001)		 ::haxe::ui::components::VerticalScroll vscroll = this->_component->findComponent(null(),::hx::ClassOf< ::haxe::ui::components::VerticalScroll >(),false,null()).StaticCast<  ::haxe::ui::components::VerticalScroll >();
HXLINE(1002)		Float vch = verticalConstraint->get_height();
HXDLIN(1002)		Float vch1 = (vch + this->verticalConstraintModifier());
HXLINE(1004)		if ((usableSize->height <= 0)) {
HXLINE(1005)			return vscroll;
            		}
HXLINE(1008)		bool _hx_tmp;
HXDLIN(1008)		if ((vch1 > usableSize->height)) {
HXLINE(1008)			_hx_tmp = ::hx::IsNull( vscroll );
            		}
            		else {
HXLINE(1008)			_hx_tmp = false;
            		}
HXDLIN(1008)		if (_hx_tmp) {
HXLINE(1009)			 ::haxe::ui::containers::ScrollViewBuilder builder = ::hx::TCast<  ::haxe::ui::containers::ScrollViewBuilder >::cast(this->_scrollview->_compositeBuilder);
HXLINE(1010)			vscroll =  ::haxe::ui::components::VerticalScroll_obj::__alloc( HX_CTX );
HXLINE(1011)			vscroll->set_includeInLayout(!(builder->autoHideScrolls));
HXLINE(1012)			vscroll->set_hidden(builder->autoHideScrolls);
HXLINE(1013)			vscroll->set_percentHeight(100);
HXLINE(1014)			vscroll->set_allowFocus(false);
HXLINE(1015)			vscroll->set_id(HX_("scrollview-vscroll",68,7b,46,57));
HXLINE(1016)			this->_component->addComponent(vscroll);
HXLINE(1017)			this->_component->registerInternalEvents(null(),true);
            		}
HXLINE(1020)		return vscroll;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollViewBuilder_obj,createVScroll,return )

void ScrollViewBuilder_obj::destroyHScroll(){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1024_destroyHScroll)
HXLINE(1025)		 ::haxe::ui::components::HorizontalScroll hscroll = this->_component->findComponent(null(),::hx::ClassOf< ::haxe::ui::components::HorizontalScroll >(),false,null()).StaticCast<  ::haxe::ui::components::HorizontalScroll >();
HXLINE(1026)		if (::hx::IsNotNull( hscroll )) {
HXLINE(1027)			this->_component->removeComponent(hscroll,null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollViewBuilder_obj,destroyHScroll,(void))

void ScrollViewBuilder_obj::destroyVScroll(){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1032_destroyVScroll)
HXLINE(1033)		 ::haxe::ui::components::VerticalScroll vscroll = this->_component->findComponent(null(),::hx::ClassOf< ::haxe::ui::components::VerticalScroll >(),false,null()).StaticCast<  ::haxe::ui::components::VerticalScroll >();
HXLINE(1034)		if (::hx::IsNotNull( vscroll )) {
HXLINE(1035)			this->_component->removeComponent(vscroll,null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollViewBuilder_obj,destroyVScroll,(void))

void ScrollViewBuilder_obj::updateScrollRect(){
            	HX_GC_STACKFRAME(&_hx_pos_23283b2891872f10_1039_updateScrollRect)
HXLINE(1040)		if (::hx::IsNull( this->_contents )) {
HXLINE(1041)			return;
            		}
HXLINE(1044)		 ::haxe::ui::geom::Size usableSize = this->_component->get_layout()->get_usableSize();
HXLINE(1046)		Float usableSize1 = usableSize->width;
HXDLIN(1046)		Float clipCX = (usableSize1 - this->horizontalConstraintModifier());
HXLINE(1047)		if ((clipCX > this->_contents->get_width())) {
HXLINE(1048)			Float clipCX1 = this->_contents->get_width();
HXDLIN(1048)			clipCX = (clipCX1 + this->horizontalConstraintModifier());
            		}
HXLINE(1050)		Float usableSize2 = usableSize->height;
HXDLIN(1050)		Float clipCY = (usableSize2 - this->verticalConstraintModifier());
HXLINE(1051)		if ((clipCY > this->_contents->get_height())) {
HXLINE(1052)			Float clipCY1 = this->_contents->get_height();
HXDLIN(1052)			clipCY = (clipCY1 + this->verticalConstraintModifier());
            		}
HXLINE(1055)		Float xpos = ( (Float)(0) );
HXLINE(1056)		Float ypos = ( (Float)(0) );
HXLINE(1058)		if ((this->get_virtualHorizontal() == false)) {
HXLINE(1059)			 ::haxe::ui::components::HorizontalScroll hscroll = this->_component->findComponent(null(),::hx::ClassOf< ::haxe::ui::components::HorizontalScroll >(),false,null()).StaticCast<  ::haxe::ui::components::HorizontalScroll >();
HXLINE(1060)			if (::hx::IsNotNull( hscroll )) {
HXLINE(1061)				xpos = hscroll->get_pos();
            			}
            		}
            		else {
HXLINE(1063)			if (::hx::IsNotNull( this->_contents->get_componentClipRect() )) {
HXLINE(1064)				clipCX = this->_contents->get_componentClipRect()->width;
            			}
            		}
HXLINE(1067)		if ((this->get_virtualVertical() == false)) {
HXLINE(1068)			 ::haxe::ui::components::VerticalScroll vscroll = this->_component->findComponent(null(),::hx::ClassOf< ::haxe::ui::components::VerticalScroll >(),false,null()).StaticCast<  ::haxe::ui::components::VerticalScroll >();
HXLINE(1069)			if (::hx::IsNotNull( vscroll )) {
HXLINE(1070)				ypos = vscroll->get_pos();
            			}
            		}
            		else {
HXLINE(1072)			if (::hx::IsNotNull( this->_contents->get_componentClipRect() )) {
HXLINE(1073)				clipCY = this->_contents->get_componentClipRect()->height;
            			}
            		}
HXLINE(1076)		 ::haxe::ui::geom::Rectangle rc =  ::haxe::ui::geom::Rectangle_obj::__alloc( HX_CTX ,(xpos + 1),ypos,::Math_obj::fround(clipCX),::Math_obj::fround(clipCY));
HXLINE(1077)		this->_contents->set_componentClipRect(rc);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollViewBuilder_obj,updateScrollRect,(void))

bool ScrollViewBuilder_obj::get_virtualHorizontal(){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1082_get_virtualHorizontal)
HXDLIN(1082)		return this->_scrollview->get_virtual();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollViewBuilder_obj,get_virtualHorizontal,return )

bool ScrollViewBuilder_obj::get_virtualVertical(){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1087_get_virtualVertical)
HXDLIN(1087)		return this->_scrollview->get_virtual();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollViewBuilder_obj,get_virtualVertical,return )

void ScrollViewBuilder_obj::onVirtualChanged(){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1090_onVirtualChanged)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollViewBuilder_obj,onVirtualChanged,(void))

void ScrollViewBuilder_obj::applyStyle( ::haxe::ui::styles::Style style){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1095_applyStyle)
HXLINE(1096)		this->super::applyStyle(style);
HXLINE(1097)		bool _hx_tmp;
HXDLIN(1097)		if (::hx::IsNotNull( style->mode )) {
HXLINE(1097)			_hx_tmp = (style->mode == HX_("mobile",62,ac,77,bf));
            		}
            		else {
HXLINE(1097)			_hx_tmp = false;
            		}
HXDLIN(1097)		if (_hx_tmp) {
HXLINE(1098)			this->autoHideScrolls = true;
            		}
            		else {
HXLINE(1100)			this->autoHideScrolls = false;
            		}
            	}



::hx::ObjectPtr< ScrollViewBuilder_obj > ScrollViewBuilder_obj::__new( ::haxe::ui::containers::ScrollView scrollview) {
	::hx::ObjectPtr< ScrollViewBuilder_obj > __this = new ScrollViewBuilder_obj();
	__this->__construct(scrollview);
	return __this;
}

::hx::ObjectPtr< ScrollViewBuilder_obj > ScrollViewBuilder_obj::__alloc(::hx::Ctx *_hx_ctx, ::haxe::ui::containers::ScrollView scrollview) {
	ScrollViewBuilder_obj *__this = (ScrollViewBuilder_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ScrollViewBuilder_obj), true, "haxe.ui.containers.ScrollViewBuilder"));
	*(void **)__this = ScrollViewBuilder_obj::_hx_vtable;
	__this->__construct(scrollview);
	return __this;
}

ScrollViewBuilder_obj::ScrollViewBuilder_obj()
{
}

void ScrollViewBuilder_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ScrollViewBuilder);
	HX_MARK_MEMBER_NAME(_scrollview,"_scrollview");
	HX_MARK_MEMBER_NAME(_contents,"_contents");
	HX_MARK_MEMBER_NAME(_contentsLayoutName,"_contentsLayoutName");
	HX_MARK_MEMBER_NAME(virtualHorizontal,"virtualHorizontal");
	HX_MARK_MEMBER_NAME(virtualVertical,"virtualVertical");
	HX_MARK_MEMBER_NAME(autoHideScrolls,"autoHideScrolls");
	 ::haxe::ui::core::CompositeBuilder_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ScrollViewBuilder_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_scrollview,"_scrollview");
	HX_VISIT_MEMBER_NAME(_contents,"_contents");
	HX_VISIT_MEMBER_NAME(_contentsLayoutName,"_contentsLayoutName");
	HX_VISIT_MEMBER_NAME(virtualHorizontal,"virtualHorizontal");
	HX_VISIT_MEMBER_NAME(virtualVertical,"virtualVertical");
	HX_VISIT_MEMBER_NAME(autoHideScrolls,"autoHideScrolls");
	 ::haxe::ui::core::CompositeBuilder_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ScrollViewBuilder_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_contents") ) { return ::hx::Val( _contents ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"applyStyle") ) { return ::hx::Val( applyStyle_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_scrollview") ) { return ::hx::Val( _scrollview ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addComponent") ) { return ::hx::Val( addComponent_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkScrolls") ) { return ::hx::Val( checkScrolls_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"createHScroll") ) { return ::hx::Val( createHScroll_dyn() ); }
		if (HX_FIELD_EQ(inName,"createVScroll") ) { return ::hx::Val( createVScroll_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"addComponentAt") ) { return ::hx::Val( addComponentAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"getComponentAt") ) { return ::hx::Val( getComponentAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroyHScroll") ) { return ::hx::Val( destroyHScroll_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroyVScroll") ) { return ::hx::Val( destroyVScroll_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"removeComponent") ) { return ::hx::Val( removeComponent_dyn() ); }
		if (HX_FIELD_EQ(inName,"virtualVertical") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_virtualVertical() : virtualVertical ); }
		if (HX_FIELD_EQ(inName,"autoHideScrolls") ) { return ::hx::Val( autoHideScrolls ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"updateScrollRect") ) { return ::hx::Val( updateScrollRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"onVirtualChanged") ) { return ::hx::Val( onVirtualChanged_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_numComponents") ) { return ::hx::Val( get_numComponents_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeComponentAt") ) { return ::hx::Val( removeComponentAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"getComponentIndex") ) { return ::hx::Val( getComponentIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"setComponentIndex") ) { return ::hx::Val( setComponentIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"virtualHorizontal") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_virtualHorizontal() : virtualHorizontal ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_contentsLayoutName") ) { return ::hx::Val( _contentsLayoutName ); }
		if (HX_FIELD_EQ(inName,"get_virtualVertical") ) { return ::hx::Val( get_virtualVertical_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_virtualHorizontal") ) { return ::hx::Val( get_virtualHorizontal_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"createContentContainer") ) { return ::hx::Val( createContentContainer_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"verticalConstraintModifier") ) { return ::hx::Val( verticalConstraintModifier_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"horizontalConstraintModifier") ) { return ::hx::Val( horizontalConstraintModifier_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ScrollViewBuilder_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"_contents") ) { _contents=inValue.Cast<  ::haxe::ui::containers::Box >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_scrollview") ) { _scrollview=inValue.Cast<  ::haxe::ui::containers::ScrollView >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"virtualVertical") ) { virtualVertical=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"autoHideScrolls") ) { autoHideScrolls=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"virtualHorizontal") ) { virtualHorizontal=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_contentsLayoutName") ) { _contentsLayoutName=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ScrollViewBuilder_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_scrollview",11,62,bf,f3));
	outFields->push(HX_("_contents",79,fc,b9,76));
	outFields->push(HX_("_contentsLayoutName",ee,9b,fd,2c));
	outFields->push(HX_("virtualHorizontal",cf,ba,86,d2));
	outFields->push(HX_("virtualVertical",a1,99,06,63));
	outFields->push(HX_("autoHideScrolls",f5,c3,3e,9c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ScrollViewBuilder_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ui::containers::ScrollView */ ,(int)offsetof(ScrollViewBuilder_obj,_scrollview),HX_("_scrollview",11,62,bf,f3)},
	{::hx::fsObject /*  ::haxe::ui::containers::Box */ ,(int)offsetof(ScrollViewBuilder_obj,_contents),HX_("_contents",79,fc,b9,76)},
	{::hx::fsString,(int)offsetof(ScrollViewBuilder_obj,_contentsLayoutName),HX_("_contentsLayoutName",ee,9b,fd,2c)},
	{::hx::fsBool,(int)offsetof(ScrollViewBuilder_obj,virtualHorizontal),HX_("virtualHorizontal",cf,ba,86,d2)},
	{::hx::fsBool,(int)offsetof(ScrollViewBuilder_obj,virtualVertical),HX_("virtualVertical",a1,99,06,63)},
	{::hx::fsBool,(int)offsetof(ScrollViewBuilder_obj,autoHideScrolls),HX_("autoHideScrolls",f5,c3,3e,9c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ScrollViewBuilder_obj_sStaticStorageInfo = 0;
#endif

static ::String ScrollViewBuilder_obj_sMemberFields[] = {
	HX_("_scrollview",11,62,bf,f3),
	HX_("_contents",79,fc,b9,76),
	HX_("_contentsLayoutName",ee,9b,fd,2c),
	HX_("create",fc,66,0f,7c),
	HX_("destroy",fa,2c,86,24),
	HX_("get_numComponents",53,76,26,3b),
	HX_("addComponent",5c,12,a8,0e),
	HX_("addComponentAt",6f,9a,96,16),
	HX_("removeComponent",d9,8b,72,50),
	HX_("removeComponentAt",2c,2d,10,3b),
	HX_("getComponentIndex",4b,fc,8e,7f),
	HX_("setComponentIndex",57,d4,fc,a2),
	HX_("getComponentAt",1a,e6,5d,08),
	HX_("createContentContainer",e4,d3,42,a7),
	HX_("horizontalConstraintModifier",d8,e6,93,6e),
	HX_("verticalConstraintModifier",ea,f2,b6,ce),
	HX_("checkScrolls",de,eb,5e,1e),
	HX_("createHScroll",f9,62,f4,48),
	HX_("createVScroll",87,e1,20,8f),
	HX_("destroyHScroll",bb,78,1d,cd),
	HX_("destroyVScroll",49,f7,49,13),
	HX_("updateScrollRect",3a,ab,52,53),
	HX_("virtualHorizontal",cf,ba,86,d2),
	HX_("get_virtualHorizontal",a6,bd,34,51),
	HX_("virtualVertical",a1,99,06,63),
	HX_("get_virtualVertical",b8,68,11,ee),
	HX_("onVirtualChanged",a8,ef,1c,9b),
	HX_("autoHideScrolls",f5,c3,3e,9c),
	HX_("applyStyle",e3,20,6f,2f),
	::String(null()) };

::hx::Class ScrollViewBuilder_obj::__mClass;

void ScrollViewBuilder_obj::__register()
{
	ScrollViewBuilder_obj _hx_dummy;
	ScrollViewBuilder_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.containers.ScrollViewBuilder",bf,ee,2c,f4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ScrollViewBuilder_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ScrollViewBuilder_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ScrollViewBuilder_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ScrollViewBuilder_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace containers
