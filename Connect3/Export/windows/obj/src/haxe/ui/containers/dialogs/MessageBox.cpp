// Generated by Haxe 4.2.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_DialogBase
#include <haxe/ui/backend/DialogBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_MessageBoxBase
#include <haxe/ui/backend/MessageBoxBase.h>
#endif
#ifndef INCLUDED_haxe_ui_binding_BindingManager
#include <haxe/ui/binding/BindingManager.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Box
#include <haxe/ui/containers/Box.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_dialogs_Dialog
#include <haxe/ui/containers/dialogs/Dialog.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_dialogs_MessageBox
#include <haxe/ui/containers/dialogs/MessageBox.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_dialogs__Dialog_DialogButton_Impl_
#include <haxe/ui/containers/dialogs/_Dialog/DialogButton_Impl_.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <haxe/ui/validation/IValidating.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_57af72f30942e4a4_18_new,"haxe.ui.containers.dialogs.MessageBox","new",0x4d350583,"haxe.ui.containers.dialogs.MessageBox.new","haxe/ui/containers/dialogs/MessageBox.hx",18,0x05c2afab)
HX_LOCAL_STACK_FRAME(_hx_pos_57af72f30942e4a4_23_onInitialize,"haxe.ui.containers.dialogs.MessageBox","onInitialize",0x08fd61cc,"haxe.ui.containers.dialogs.MessageBox.onInitialize","haxe/ui/containers/dialogs/MessageBox.hx",23,0x05c2afab)
HX_LOCAL_STACK_FRAME(_hx_pos_17885a1c11a87dcd_370_registerBehaviours,"haxe.ui.containers.dialogs.MessageBox","registerBehaviours",0xc0bfb216,"haxe.ui.containers.dialogs.MessageBox.registerBehaviours","haxe/ui/macros/Macros.hx",370,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_679593b0b8a98bb4_525_cloneComponent,"haxe.ui.containers.dialogs.MessageBox","cloneComponent",0x51f3d15d,"haxe.ui.containers.dialogs.MessageBox.cloneComponent","haxe/ui/macros/helpers/ClassBuilder.hx",525,0x8cdaad7b)
HX_LOCAL_STACK_FRAME(_hx_pos_17885a1c11a87dcd_351_self,"haxe.ui.containers.dialogs.MessageBox","self",0x447dd509,"haxe.ui.containers.dialogs.MessageBox.self","haxe/ui/macros/Macros.hx",351,0x27866361)
namespace haxe{
namespace ui{
namespace containers{
namespace dialogs{

void MessageBox_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_57af72f30942e4a4_18_new)
HXLINE(  19)		super::__construct();
HXLINE(  20)		this->set_title(HX_("Message",a7,5d,62,67));
            	}

Dynamic MessageBox_obj::__CreateEmpty() { return new MessageBox_obj; }

void *MessageBox_obj::_hx_vtable = 0;

Dynamic MessageBox_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MessageBox_obj > _hx_result = new MessageBox_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MessageBox_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x241b0321) {
		if (inClassId<=(int)0x1395e371) {
			if (inClassId<=(int)0x0c89e854) {
				if (inClassId<=(int)0x0330636f) {
					if (inClassId<=(int)0x01557b4b) {
						return inClassId==(int)0x00000001 || inClassId==(int)0x01557b4b;
					} else {
						return inClassId==(int)0x0330636f;
					}
				} else {
					return inClassId==(int)0x0c89e854;
				}
			} else {
				return inClassId==(int)0x0f2dd418 || inClassId==(int)0x1395e371;
			}
		} else {
			if (inClassId<=(int)0x1f4df417) {
				if (inClassId<=(int)0x1e1df847) {
					return inClassId==(int)0x13d76ae7 || inClassId==(int)0x1e1df847;
				} else {
					return inClassId==(int)0x1f4df417;
				}
			} else {
				return inClassId==(int)0x241810fb || inClassId==(int)0x241b0321;
			}
		}
	} else {
		if (inClassId<=(int)0x715d6dae) {
			if (inClassId<=(int)0x4af7dd8e) {
				if (inClassId<=(int)0x3424f103) {
					return inClassId==(int)0x2ccba775 || inClassId==(int)0x3424f103;
				} else {
					return inClassId==(int)0x4af7dd8e;
				}
			} else {
				return inClassId==(int)0x6b353933 || inClassId==(int)0x715d6dae;
			}
		} else {
			if (inClassId<=(int)0x7ec24579) {
				if (inClassId<=(int)0x7b5df583) {
					return inClassId==(int)0x72c347e4 || inClassId==(int)0x7b5df583;
				} else {
					return inClassId==(int)0x7ec24579;
				}
			} else {
				return inClassId==(int)0x7f2ed947;
			}
		}
	}
}

void MessageBox_obj::onInitialize(){
            	HX_STACKFRAME(&_hx_pos_57af72f30942e4a4_23_onInitialize)
HXLINE(  24)		this->super::onInitialize();
HXLINE(  25)		if ((::haxe::ui::containers::dialogs::_Dialog::DialogButton_Impl__obj::toArray(this->buttons)->length == 0)) {
HXLINE(  26)			::String _hx_switch_0 = this->get_type();
            			if (  (_hx_switch_0==HX_("error",c8,cb,29,73)) ){
HXLINE(  34)				this->buttons = HX_("{{dialog.close}}",12,f5,ad,37);
HXDLIN(  34)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("info",6e,38,bb,45)) ){
HXLINE(  28)				this->buttons = HX_("{{dialog.ok}}",42,9b,53,5b);
HXDLIN(  28)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("question",26,9b,b0,26)) ){
HXLINE(  30)				::Array< ::String > larr = HX_("{{dialog.yes}}",c1,2d,d7,4b).split(HX_("|",7c,00,00,00));
HXDLIN(  30)				::Array< ::String > rarr = HX_("{{dialog.no}}",a7,6d,ad,5a).split(HX_("|",7c,00,00,00));
HXDLIN(  30)				{
HXLINE(  30)					int _g = 0;
HXDLIN(  30)					while((_g < rarr->length)){
HXLINE(  30)						::String r = rarr->__get(_g);
HXDLIN(  30)						_g = (_g + 1);
HXDLIN(  30)						if ((larr->indexOf(r,null()) == -1)) {
HXLINE(  30)							larr->push(r);
            						}
            					}
            				}
HXDLIN(  30)				::Array< ::String > larr1 = ::haxe::ui::containers::dialogs::_Dialog::DialogButton_Impl__obj::toString(larr->join(HX_("|",7c,00,00,00))).split(HX_("|",7c,00,00,00));
HXDLIN(  30)				::Array< ::String > rarr1 = ::haxe::ui::containers::dialogs::_Dialog::DialogButton_Impl__obj::toString(HX_("{{dialog.cancel}}",20,d6,4a,1a)).split(HX_("|",7c,00,00,00));
HXDLIN(  30)				{
HXLINE(  30)					int _g1 = 0;
HXDLIN(  30)					while((_g1 < rarr1->length)){
HXLINE(  30)						::String r = rarr1->__get(_g1);
HXDLIN(  30)						_g1 = (_g1 + 1);
HXDLIN(  30)						if ((larr1->indexOf(r,null()) == -1)) {
HXLINE(  30)							larr1->push(r);
            						}
            					}
            				}
HXDLIN(  30)				this->buttons = larr1->join(HX_("|",7c,00,00,00));
HXDLIN(  30)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("warning",5c,da,cb,09)) ){
HXLINE(  32)				this->buttons = HX_("{{dialog.close}}",12,f5,ad,37);
HXDLIN(  32)				goto _hx_goto_1;
            			}
            			_hx_goto_1:;
HXLINE(  36)			this->createButtons();
            		}
HXLINE(  38)		if ((this->get_title() == HX_("Message",a7,5d,62,67))) {
HXLINE(  39)			::String _hx_switch_1 = this->get_type();
            			if (  (_hx_switch_1==HX_("error",c8,cb,29,73)) ){
HXLINE(  47)				this->set_title(HX_("Error",a8,3b,57,06));
HXDLIN(  47)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_1==HX_("info",6e,38,bb,45)) ){
HXLINE(  41)				this->set_title(HX_("Info",8e,64,94,30));
HXDLIN(  41)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_1==HX_("question",26,9b,b0,26)) ){
HXLINE(  43)				this->set_title(HX_("Question",46,57,62,00));
HXDLIN(  43)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_1==HX_("warning",5c,da,cb,09)) ){
HXLINE(  45)				this->set_title(HX_("Warning",3c,02,1d,d7));
HXDLIN(  45)				goto _hx_goto_4;
            			}
            			_hx_goto_4:;
            		}
            	}


void MessageBox_obj::registerBehaviours(){
            	HX_STACKFRAME(&_hx_pos_17885a1c11a87dcd_370_registerBehaviours)
HXDLIN( 370)		this->super::registerBehaviours();
            	}


 ::haxe::ui::core::ComponentContainer MessageBox_obj::cloneComponent(){
            	HX_STACKFRAME(&_hx_pos_679593b0b8a98bb4_525_cloneComponent)
HXLINE( 300)		 ::haxe::ui::containers::dialogs::MessageBox c = ( ( ::haxe::ui::containers::dialogs::MessageBox)(this->super::cloneComponent()) );
HXLINE( 316)		::Array< ::Dynamic> _hx_tmp;
HXDLIN( 316)		if (::hx::IsNull( this->_children )) {
HXLINE( 316)			_hx_tmp = ::Array_obj< ::Dynamic>::__new(0);
            		}
            		else {
HXLINE( 316)			_hx_tmp = this->_children;
            		}
HXDLIN( 316)		::Array< ::Dynamic> _hx_tmp1;
HXDLIN( 316)		if (::hx::IsNull( c->_children )) {
HXLINE( 316)			_hx_tmp1 = ::Array_obj< ::Dynamic>::__new(0);
            		}
            		else {
HXLINE( 316)			_hx_tmp1 = c->_children;
            		}
HXDLIN( 316)		if ((_hx_tmp->length != _hx_tmp1->length)) {
HXLINE( 317)			int _g = 0;
HXDLIN( 317)			::Array< ::Dynamic> _g1;
HXDLIN( 317)			if (::hx::IsNull( this->_children )) {
HXLINE( 317)				_g1 = ::Array_obj< ::Dynamic>::__new(0);
            			}
            			else {
HXLINE( 317)				_g1 = this->_children;
            			}
HXDLIN( 317)			while((_g < _g1->length)){
HXLINE( 317)				 ::haxe::ui::core::Component child = _g1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN( 317)				_g = (_g + 1);
HXLINE( 318)				c->addComponent(Dynamic( child->cloneComponent()).StaticCast<  ::haxe::ui::core::Component >());
            			}
            		}
HXLINE( 322)		::haxe::ui::binding::BindingManager_obj::get_instance()->cloneBinding(( ( ::haxe::ui::core::Component)(::hx::ObjectPtr<OBJ_>(this)) ),( ( ::haxe::ui::core::Component)(c) ));
HXLINE( 323)		return c;
            	}


 ::haxe::ui::core::ComponentContainer MessageBox_obj::self(){
            	HX_GC_STACKFRAME(&_hx_pos_17885a1c11a87dcd_351_self)
HXDLIN( 351)		return  ::haxe::ui::containers::dialogs::MessageBox_obj::__alloc( HX_CTX );
            	}



::hx::ObjectPtr< MessageBox_obj > MessageBox_obj::__new() {
	::hx::ObjectPtr< MessageBox_obj > __this = new MessageBox_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< MessageBox_obj > MessageBox_obj::__alloc(::hx::Ctx *_hx_ctx) {
	MessageBox_obj *__this = (MessageBox_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MessageBox_obj), true, "haxe.ui.containers.dialogs.MessageBox"));
	*(void **)__this = MessageBox_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MessageBox_obj::MessageBox_obj()
{
}

::hx::Val MessageBox_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"self") ) { return ::hx::Val( self_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"onInitialize") ) { return ::hx::Val( onInitialize_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"cloneComponent") ) { return ::hx::Val( cloneComponent_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"registerBehaviours") ) { return ::hx::Val( registerBehaviours_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *MessageBox_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *MessageBox_obj_sStaticStorageInfo = 0;
#endif

static ::String MessageBox_obj_sMemberFields[] = {
	HX_("onInitialize",4f,d3,fe,c4),
	HX_("registerBehaviours",d9,a7,67,34),
	HX_("cloneComponent",a0,e9,56,26),
	HX_("self",8c,8b,50,4c),
	::String(null()) };

::hx::Class MessageBox_obj::__mClass;

void MessageBox_obj::__register()
{
	MessageBox_obj _hx_dummy;
	MessageBox_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.containers.dialogs.MessageBox",11,88,45,5f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MessageBox_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MessageBox_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MessageBox_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MessageBox_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace containers
} // end namespace dialogs
