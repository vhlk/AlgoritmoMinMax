// Generated by Haxe 4.2.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_Toolkit
#include <haxe/ui/Toolkit.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventBase
#include <haxe/ui/backend/EventBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventImpl
#include <haxe/ui/backend/EventImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ScreenBase
#include <haxe/ui/backend/ScreenBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ScreenImpl
#include <haxe/ui/backend/ScreenImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_components_Button
#include <haxe/ui/components/Button.h>
#endif
#ifndef INCLUDED_haxe_ui_components_Range
#include <haxe/ui/components/Range.h>
#endif
#ifndef INCLUDED_haxe_ui_components_Slider
#include <haxe/ui/components/Slider.h>
#endif
#ifndef INCLUDED_haxe_ui_components_SliderBuilder
#include <haxe/ui/components/SliderBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_components__Slider_Events
#include <haxe/ui/components/_Slider/Events.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_CompositeBuilder
#include <haxe/ui/core/CompositeBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IDirectionalComponent
#include <haxe/ui/core/IDirectionalComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_core_InteractiveComponent
#include <haxe/ui/core/InteractiveComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Screen
#include <haxe/ui/core/Screen.h>
#endif
#ifndef INCLUDED_haxe_ui_events_Events
#include <haxe/ui/events/Events.h>
#endif
#ifndef INCLUDED_haxe_ui_events_MouseEvent
#include <haxe/ui/events/MouseEvent.h>
#endif
#ifndef INCLUDED_haxe_ui_events_UIEvent
#include <haxe/ui/events/UIEvent.h>
#endif
#ifndef INCLUDED_haxe_ui_focus_IFocusable
#include <haxe/ui/focus/IFocusable.h>
#endif
#ifndef INCLUDED_haxe_ui_geom_Point
#include <haxe/ui/geom/Point.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <haxe/ui/validation/IValidating.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4558645a73103afe_135_new,"haxe.ui.components._Slider.Events","new",0xbd53747f,"haxe.ui.components._Slider.Events.new","haxe/ui/components/Slider.hx",135,0x55cb8456)
HX_LOCAL_STACK_FRAME(_hx_pos_4558645a73103afe_150_register,"haxe.ui.components._Slider.Events","register",0x837db1e4,"haxe.ui.components._Slider.Events.register","haxe/ui/components/Slider.hx",150,0x55cb8456)
HX_LOCAL_STACK_FRAME(_hx_pos_4558645a73103afe_169_unregister,"haxe.ui.components._Slider.Events","unregister",0x057c3b7d,"haxe.ui.components._Slider.Events.unregister","haxe/ui/components/Slider.hx",169,0x55cb8456)
HX_LOCAL_STACK_FRAME(_hx_pos_4558645a73103afe_183_onRangeChange,"haxe.ui.components._Slider.Events","onRangeChange",0x4696d50d,"haxe.ui.components._Slider.Events.onRangeChange","haxe/ui/components/Slider.hx",183,0x55cb8456)
HX_LOCAL_STACK_FRAME(_hx_pos_4558645a73103afe_186_onRangeMouseDown,"haxe.ui.components._Slider.Events","onRangeMouseDown",0x1f30cdaa,"haxe.ui.components._Slider.Events.onRangeMouseDown","haxe/ui/components/Slider.hx",186,0x55cb8456)
HX_LOCAL_STACK_FRAME(_hx_pos_4558645a73103afe_230_onThumbMouseDown,"haxe.ui.components._Slider.Events","onThumbMouseDown",0x1d61fe31,"haxe.ui.components._Slider.Events.onThumbMouseDown","haxe/ui/components/Slider.hx",230,0x55cb8456)
HX_LOCAL_STACK_FRAME(_hx_pos_4558645a73103afe_235_startDrag,"haxe.ui.components._Slider.Events","startDrag",0xcacfaad5,"haxe.ui.components._Slider.Events.startDrag","haxe/ui/components/Slider.hx",235,0x55cb8456)
HX_LOCAL_STACK_FRAME(_hx_pos_4558645a73103afe_242_onScreenMouseUp,"haxe.ui.components._Slider.Events","onScreenMouseUp",0x6755a3d4,"haxe.ui.components._Slider.Events.onScreenMouseUp","haxe/ui/components/Slider.hx",242,0x55cb8456)
HX_LOCAL_STACK_FRAME(_hx_pos_4558645a73103afe_248_onScreenMouseMove,"haxe.ui.components._Slider.Events","onScreenMouseMove",0x1d9b30ca,"haxe.ui.components._Slider.Events.onScreenMouseMove","haxe/ui/components/Slider.hx",248,0x55cb8456)
namespace haxe{
namespace ui{
namespace components{
namespace _Slider{

void Events_obj::__construct( ::haxe::ui::components::Slider slider){
            	HX_STACKFRAME(&_hx_pos_4558645a73103afe_135_new)
HXLINE( 229)		this->_offset = null();
HXLINE( 145)		super::__construct(slider);
HXLINE( 146)		this->_slider = slider;
HXLINE( 147)		this->_range = slider->findComponent(null(),::hx::ClassOf< ::haxe::ui::components::Range >(),null(),null()).StaticCast<  ::haxe::ui::components::Range >();
            	}

Dynamic Events_obj::__CreateEmpty() { return new Events_obj; }

void *Events_obj::_hx_vtable = 0;

Dynamic Events_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Events_obj > _hx_result = new Events_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Events_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0548a7cc) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0548a7cc;
	} else {
		return inClassId==(int)0x3f692b49;
	}
}

void Events_obj::_hx_register(){
            	HX_STACKFRAME(&_hx_pos_4558645a73103afe_150_register)
HXLINE( 151)		this->_startThumb = this->_slider->findComponent(HX_("start-thumb",ab,c8,f3,50),null(),null(),null()).StaticCast<  ::haxe::ui::components::Button >();
HXLINE( 152)		bool _hx_tmp;
HXDLIN( 152)		if (::hx::IsNotNull( this->_startThumb )) {
HXLINE( 152)			_hx_tmp = (this->_startThumb->hasEvent(HX_("mousedown",07,85,e9,03),this->onThumbMouseDown_dyn()) == false);
            		}
            		else {
HXLINE( 152)			_hx_tmp = false;
            		}
HXDLIN( 152)		if (_hx_tmp) {
HXLINE( 153)			this->_startThumb->registerEvent(HX_("mousedown",07,85,e9,03),this->onThumbMouseDown_dyn(),null());
            		}
HXLINE( 156)		this->_endThumb = this->_slider->findComponent(HX_("end-thumb",e4,b8,ef,18),null(),null(),null()).StaticCast<  ::haxe::ui::components::Button >();
HXLINE( 157)		bool _hx_tmp1;
HXDLIN( 157)		if (::hx::IsNotNull( this->_endThumb )) {
HXLINE( 157)			_hx_tmp1 = (this->_endThumb->hasEvent(HX_("mousedown",07,85,e9,03),this->onThumbMouseDown_dyn()) == false);
            		}
            		else {
HXLINE( 157)			_hx_tmp1 = false;
            		}
HXDLIN( 157)		if (_hx_tmp1) {
HXLINE( 158)			this->_endThumb->registerEvent(HX_("mousedown",07,85,e9,03),this->onThumbMouseDown_dyn(),null());
            		}
HXLINE( 161)		if ((this->_range->hasEvent(HX_("mousedown",07,85,e9,03),this->onRangeMouseDown_dyn()) == false)) {
HXLINE( 162)			this->_range->registerEvent(HX_("mousedown",07,85,e9,03),this->onRangeMouseDown_dyn(),null());
            		}
HXLINE( 164)		if ((this->_range->hasEvent(HX_("change",70,91,72,b7),this->onRangeChange_dyn()) == false)) {
HXLINE( 165)			this->_range->registerEvent(HX_("change",70,91,72,b7),this->onRangeChange_dyn(),null());
            		}
            	}


void Events_obj::unregister(){
            	HX_STACKFRAME(&_hx_pos_4558645a73103afe_169_unregister)
HXLINE( 170)		if (::hx::IsNotNull( this->_startThumb )) {
HXLINE( 171)			this->_startThumb->unregisterEvent(HX_("mousedown",07,85,e9,03),this->onThumbMouseDown_dyn());
            		}
HXLINE( 174)		if (::hx::IsNotNull( this->_endThumb )) {
HXLINE( 175)			this->_endThumb->unregisterEvent(HX_("mousedown",07,85,e9,03),this->onThumbMouseDown_dyn());
            		}
HXLINE( 178)		this->_range->unregisterEvent(HX_("mousedown",07,85,e9,03),this->onRangeMouseDown_dyn());
HXLINE( 179)		this->_range->unregisterEvent(HX_("change",70,91,72,b7),this->onRangeChange_dyn());
            	}


void Events_obj::onRangeChange( ::haxe::ui::events::UIEvent e){
            	HX_GC_STACKFRAME(&_hx_pos_4558645a73103afe_183_onRangeChange)
HXDLIN( 183)		 ::haxe::ui::components::Slider _hx_tmp = this->_slider;
HXDLIN( 183)		_hx_tmp->dispatch( ::haxe::ui::events::UIEvent_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Events_obj,onRangeChange,(void))

void Events_obj::onRangeMouseDown( ::haxe::ui::events::MouseEvent e){
            	HX_GC_STACKFRAME(&_hx_pos_4558645a73103afe_186_onRangeMouseDown)
HXLINE( 187)		bool _hx_tmp;
HXDLIN( 187)		if (::hx::IsNotNull( this->_startThumb )) {
HXLINE( 187)			_hx_tmp = (this->_startThumb->hitTest(e->screenX,e->screenY) == true);
            		}
            		else {
HXLINE( 187)			_hx_tmp = false;
            		}
HXDLIN( 187)		if (_hx_tmp) {
HXLINE( 188)			return;
            		}
HXLINE( 190)		bool _hx_tmp1;
HXDLIN( 190)		if (::hx::IsNotNull( this->_endThumb )) {
HXLINE( 190)			_hx_tmp1 = (this->_endThumb->hitTest(e->screenX,e->screenY) == true);
            		}
            		else {
HXLINE( 190)			_hx_tmp1 = false;
            		}
HXDLIN( 190)		if (_hx_tmp1) {
HXLINE( 191)			return;
            		}
HXLINE( 194)		 ::haxe::ui::events::MouseEvent e1 = e;
HXDLIN( 194)		Float e2 = e1->screenX;
HXDLIN( 194)		e1->screenX = (e2 * ::haxe::ui::Toolkit_obj::get_scaleX());
HXLINE( 195)		 ::haxe::ui::events::MouseEvent e3 = e;
HXDLIN( 195)		Float e4 = e3->screenY;
HXDLIN( 195)		e3->screenY = (e4 * ::haxe::ui::Toolkit_obj::get_scaleY());
HXLINE( 196)		e->cancel();
HXLINE( 198)		 ::haxe::ui::geom::Point coord =  ::haxe::ui::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 199)		Float e5 = e->screenX;
HXDLIN( 199)		Float _hx_tmp2 = (e5 - this->_slider->get_screenLeft());
HXDLIN( 199)		 ::Dynamic _hx_tmp3 = this->_slider->get_paddingLeft();
HXDLIN( 199)		coord->x = (_hx_tmp2 - (( (Float)(_hx_tmp3) ) * ::haxe::ui::Toolkit_obj::get_scaleX()));
HXLINE( 200)		Float e6 = e->screenY;
HXDLIN( 200)		Float _hx_tmp4 = (e6 - this->_slider->get_screenTop());
HXDLIN( 200)		 ::Dynamic _hx_tmp5 = this->_slider->get_paddingTop();
HXDLIN( 200)		coord->y = (_hx_tmp4 - (( (Float)(_hx_tmp5) ) * ::haxe::ui::Toolkit_obj::get_scaleY()));
HXLINE( 201)		Float pos = this->_slider->posFromCoord(coord);
HXLINE( 203)		if (::hx::IsNull( this->_startThumb )) {
HXLINE( 204)			this->_slider->set_pos(pos);
HXLINE( 205)			 ::haxe::ui::components::Button _hx_tmp = this->_endThumb;
HXDLIN( 205)			Float _hx_tmp1 = (this->_endThumb->get_actualComponentWidth() / ( (Float)(2) ));
HXDLIN( 205)			this->startDrag(_hx_tmp,_hx_tmp1,(this->_endThumb->get_actualComponentHeight() / ( (Float)(2) )));
HXLINE( 206)			return;
            		}
HXLINE( 209)		 ::haxe::ui::components::SliderBuilder builder = ::hx::TCast<  ::haxe::ui::components::SliderBuilder >::cast(this->_slider->_compositeBuilder);
HXLINE( 210)		Float d1 = this->_slider->get_end();
HXDLIN( 210)		Float d11 = (d1 - ( (Float)(this->_slider->get_start()) ));
HXLINE( 211)		Float d2 = (pos - ( (Float)(this->_slider->get_start()) ));
HXLINE( 212)		if ((d2 < (d11 / ( (Float)(2) )))) {
HXLINE( 213)			pos = (pos - builder->getStartOffset());
HXLINE( 214)			this->_slider->set_start(pos);
HXLINE( 215)			 ::haxe::ui::components::Button _hx_tmp = this->_startThumb;
HXDLIN( 215)			Float _hx_tmp1 = (this->_startThumb->get_actualComponentWidth() / ( (Float)(2) ));
HXDLIN( 215)			this->startDrag(_hx_tmp,_hx_tmp1,(this->_startThumb->get_actualComponentHeight() / ( (Float)(2) )));
            		}
            		else {
HXLINE( 216)			if ((d2 >= (d11 / ( (Float)(2) )))) {
HXLINE( 217)				pos = (pos - builder->getStartOffset());
HXLINE( 218)				this->_slider->set_end(pos);
HXLINE( 219)				 ::haxe::ui::components::Button _hx_tmp = this->_endThumb;
HXDLIN( 219)				Float _hx_tmp1 = (this->_endThumb->get_actualComponentWidth() / ( (Float)(2) ));
HXDLIN( 219)				this->startDrag(_hx_tmp,_hx_tmp1,(this->_endThumb->get_actualComponentHeight() / ( (Float)(2) )));
            			}
            			else {
HXLINE( 220)				if (::hx::IsGreater( pos,this->_slider->get_start() )) {
HXLINE( 221)					this->_slider->set_end(pos);
HXLINE( 222)					 ::haxe::ui::components::Button _hx_tmp = this->_endThumb;
HXDLIN( 222)					Float _hx_tmp1 = (this->_endThumb->get_actualComponentWidth() / ( (Float)(2) ));
HXDLIN( 222)					this->startDrag(_hx_tmp,_hx_tmp1,(this->_endThumb->get_actualComponentHeight() / ( (Float)(2) )));
            				}
            				else {
HXLINE( 223)					if ((pos < this->_slider->get_end())) {
HXLINE( 224)						this->_slider->set_start(pos);
HXLINE( 225)						 ::haxe::ui::components::Button _hx_tmp = this->_startThumb;
HXDLIN( 225)						Float _hx_tmp1 = (this->_startThumb->get_actualComponentWidth() / ( (Float)(2) ));
HXDLIN( 225)						this->startDrag(_hx_tmp,_hx_tmp1,(this->_startThumb->get_actualComponentHeight() / ( (Float)(2) )));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Events_obj,onRangeMouseDown,(void))

void Events_obj::onThumbMouseDown( ::haxe::ui::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_4558645a73103afe_230_onThumbMouseDown)
HXLINE( 231)		e->cancel();
HXLINE( 232)		 ::haxe::ui::components::Button _hx_tmp = ::hx::TCast<  ::haxe::ui::components::Button >::cast(e->target);
HXDLIN( 232)		 ::Dynamic _hx_tmp1 = e->get_localX();
HXDLIN( 232)		Float _hx_tmp2 = (( (Float)(_hx_tmp1) ) * ::haxe::ui::Toolkit_obj::get_scaleX());
HXDLIN( 232)		 ::Dynamic _hx_tmp3 = e->get_localY();
HXDLIN( 232)		this->startDrag(_hx_tmp,_hx_tmp2,(( (Float)(_hx_tmp3) ) * ::haxe::ui::Toolkit_obj::get_scaleX()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Events_obj,onThumbMouseDown,(void))

void Events_obj::startDrag( ::haxe::ui::components::Button thumb,Float offsetX,Float offsetY){
            	HX_GC_STACKFRAME(&_hx_pos_4558645a73103afe_235_startDrag)
HXLINE( 236)		this->_offset =  ::haxe::ui::geom::Point_obj::__alloc( HX_CTX ,offsetX,offsetY);
HXLINE( 237)		this->_activeThumb = thumb;
HXLINE( 238)		::haxe::ui::core::Screen_obj::get_instance()->registerEvent(HX_("mousemove",b6,6f,dc,09),this->onScreenMouseMove_dyn(),null());
HXLINE( 239)		::haxe::ui::core::Screen_obj::get_instance()->registerEvent(HX_("mouseup",c0,0f,73,c0),this->onScreenMouseUp_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC3(Events_obj,startDrag,(void))

void Events_obj::onScreenMouseUp( ::haxe::ui::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_4558645a73103afe_242_onScreenMouseUp)
HXLINE( 243)		this->_activeThumb = null();
HXLINE( 244)		::haxe::ui::core::Screen_obj::get_instance()->unregisterEvent(HX_("mouseup",c0,0f,73,c0),this->onScreenMouseUp_dyn());
HXLINE( 245)		::haxe::ui::core::Screen_obj::get_instance()->unregisterEvent(HX_("mousemove",b6,6f,dc,09),this->onScreenMouseMove_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Events_obj,onScreenMouseUp,(void))

void Events_obj::onScreenMouseMove( ::haxe::ui::events::MouseEvent e){
            	HX_GC_STACKFRAME(&_hx_pos_4558645a73103afe_248_onScreenMouseMove)
HXLINE( 249)		 ::haxe::ui::events::MouseEvent e1 = e;
HXDLIN( 249)		Float e2 = e1->screenX;
HXDLIN( 249)		e1->screenX = (e2 * ::haxe::ui::Toolkit_obj::get_scaleX());
HXLINE( 250)		 ::haxe::ui::events::MouseEvent e3 = e;
HXDLIN( 250)		Float e4 = e3->screenY;
HXDLIN( 250)		e3->screenY = (e4 * ::haxe::ui::Toolkit_obj::get_scaleY());
HXLINE( 251)		 ::haxe::ui::geom::Point coord =  ::haxe::ui::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 252)		Float e5 = e->screenX;
HXDLIN( 252)		Float _hx_tmp = (e5 - this->_slider->get_screenLeft());
HXDLIN( 252)		Float _hx_tmp1 = (_hx_tmp - this->_offset->x);
HXDLIN( 252)		 ::Dynamic _hx_tmp2 = this->_slider->get_paddingLeft();
HXDLIN( 252)		Float _hx_tmp3 = (_hx_tmp1 - (( (Float)(_hx_tmp2) ) * ::haxe::ui::Toolkit_obj::get_scaleX()));
HXDLIN( 252)		coord->x = (_hx_tmp3 + (this->_activeThumb->get_actualComponentWidth() / ( (Float)(2) )));
HXLINE( 253)		Float e6 = e->screenY;
HXDLIN( 253)		Float _hx_tmp4 = (e6 - this->_slider->get_screenTop());
HXDLIN( 253)		Float _hx_tmp5 = (_hx_tmp4 - this->_offset->y);
HXDLIN( 253)		 ::Dynamic _hx_tmp6 = this->_slider->get_paddingTop();
HXDLIN( 253)		Float _hx_tmp7 = (_hx_tmp5 - (( (Float)(_hx_tmp6) ) * ::haxe::ui::Toolkit_obj::get_scaleX()));
HXDLIN( 253)		coord->y = (_hx_tmp7 + (this->_activeThumb->get_actualComponentHeight() / ( (Float)(2) )));
HXLINE( 254)		Float pos = this->_slider->posFromCoord(coord);
HXLINE( 256)		 ::haxe::ui::components::SliderBuilder builder = ::hx::TCast<  ::haxe::ui::components::SliderBuilder >::cast(this->_slider->_compositeBuilder);
HXLINE( 257)		if (::hx::IsInstanceEq( this->_activeThumb,this->_startThumb )) {
HXLINE( 258)			pos = (pos - builder->getStartOffset());
HXLINE( 259)			if ((pos > this->_slider->get_end())) {
HXLINE( 260)				pos = this->_slider->get_end();
            			}
HXLINE( 262)			this->_slider->set_start(pos);
            		}
            		else {
HXLINE( 263)			if (::hx::IsInstanceEq( this->_activeThumb,this->_endThumb )) {
HXLINE( 264)				pos = (pos - builder->getStartOffset());
HXLINE( 265)				this->_slider->set_end(pos);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Events_obj,onScreenMouseMove,(void))


::hx::ObjectPtr< Events_obj > Events_obj::__new( ::haxe::ui::components::Slider slider) {
	::hx::ObjectPtr< Events_obj > __this = new Events_obj();
	__this->__construct(slider);
	return __this;
}

::hx::ObjectPtr< Events_obj > Events_obj::__alloc(::hx::Ctx *_hx_ctx, ::haxe::ui::components::Slider slider) {
	Events_obj *__this = (Events_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Events_obj), true, "haxe.ui.components._Slider.Events"));
	*(void **)__this = Events_obj::_hx_vtable;
	__this->__construct(slider);
	return __this;
}

Events_obj::Events_obj()
{
}

void Events_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Events);
	HX_MARK_MEMBER_NAME(_slider,"_slider");
	HX_MARK_MEMBER_NAME(_endThumb,"_endThumb");
	HX_MARK_MEMBER_NAME(_startThumb,"_startThumb");
	HX_MARK_MEMBER_NAME(_range,"_range");
	HX_MARK_MEMBER_NAME(_activeThumb,"_activeThumb");
	HX_MARK_MEMBER_NAME(_offset,"_offset");
	 ::haxe::ui::events::Events_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Events_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_slider,"_slider");
	HX_VISIT_MEMBER_NAME(_endThumb,"_endThumb");
	HX_VISIT_MEMBER_NAME(_startThumb,"_startThumb");
	HX_VISIT_MEMBER_NAME(_range,"_range");
	HX_VISIT_MEMBER_NAME(_activeThumb,"_activeThumb");
	HX_VISIT_MEMBER_NAME(_offset,"_offset");
	 ::haxe::ui::events::Events_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Events_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_range") ) { return ::hx::Val( _range ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_slider") ) { return ::hx::Val( _slider ); }
		if (HX_FIELD_EQ(inName,"_offset") ) { return ::hx::Val( _offset ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"register") ) { return ::hx::Val( _hx_register_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_endThumb") ) { return ::hx::Val( _endThumb ); }
		if (HX_FIELD_EQ(inName,"startDrag") ) { return ::hx::Val( startDrag_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"unregister") ) { return ::hx::Val( unregister_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_startThumb") ) { return ::hx::Val( _startThumb ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_activeThumb") ) { return ::hx::Val( _activeThumb ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onRangeChange") ) { return ::hx::Val( onRangeChange_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"onScreenMouseUp") ) { return ::hx::Val( onScreenMouseUp_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"onRangeMouseDown") ) { return ::hx::Val( onRangeMouseDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"onThumbMouseDown") ) { return ::hx::Val( onThumbMouseDown_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"onScreenMouseMove") ) { return ::hx::Val( onScreenMouseMove_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Events_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_range") ) { _range=inValue.Cast<  ::haxe::ui::components::Range >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_slider") ) { _slider=inValue.Cast<  ::haxe::ui::components::Slider >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_offset") ) { _offset=inValue.Cast<  ::haxe::ui::geom::Point >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_endThumb") ) { _endThumb=inValue.Cast<  ::haxe::ui::components::Button >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_startThumb") ) { _startThumb=inValue.Cast<  ::haxe::ui::components::Button >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_activeThumb") ) { _activeThumb=inValue.Cast<  ::haxe::ui::components::Button >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Events_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_slider",c0,d7,7b,de));
	outFields->push(HX_("_endThumb",9a,2b,26,55));
	outFields->push(HX_("_startThumb",73,47,33,fe));
	outFields->push(HX_("_range",fe,ec,06,e0));
	outFields->push(HX_("_activeThumb",71,50,e1,d1));
	outFields->push(HX_("_offset",32,a9,b6,ce));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Events_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ui::components::Slider */ ,(int)offsetof(Events_obj,_slider),HX_("_slider",c0,d7,7b,de)},
	{::hx::fsObject /*  ::haxe::ui::components::Button */ ,(int)offsetof(Events_obj,_endThumb),HX_("_endThumb",9a,2b,26,55)},
	{::hx::fsObject /*  ::haxe::ui::components::Button */ ,(int)offsetof(Events_obj,_startThumb),HX_("_startThumb",73,47,33,fe)},
	{::hx::fsObject /*  ::haxe::ui::components::Range */ ,(int)offsetof(Events_obj,_range),HX_("_range",fe,ec,06,e0)},
	{::hx::fsObject /*  ::haxe::ui::components::Button */ ,(int)offsetof(Events_obj,_activeThumb),HX_("_activeThumb",71,50,e1,d1)},
	{::hx::fsObject /*  ::haxe::ui::geom::Point */ ,(int)offsetof(Events_obj,_offset),HX_("_offset",32,a9,b6,ce)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Events_obj_sStaticStorageInfo = 0;
#endif

static ::String Events_obj_sMemberFields[] = {
	HX_("_slider",c0,d7,7b,de),
	HX_("_endThumb",9a,2b,26,55),
	HX_("_startThumb",73,47,33,fe),
	HX_("_range",fe,ec,06,e0),
	HX_("_activeThumb",71,50,e1,d1),
	HX_("register",63,a6,9f,d0),
	HX_("unregister",bc,8d,63,56),
	HX_("onRangeChange",2e,34,33,9d),
	HX_("onRangeMouseDown",29,d9,29,b3),
	HX_("_offset",32,a9,b6,ce),
	HX_("onThumbMouseDown",b0,09,5b,b1),
	HX_("startDrag",76,a5,63,fb),
	HX_("onScreenMouseUp",35,cd,20,e5),
	HX_("onScreenMouseMove",6b,34,8c,03),
	::String(null()) };

::hx::Class Events_obj::__mClass;

void Events_obj::__register()
{
	Events_obj _hx_dummy;
	Events_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.components._Slider.Events",0d,c9,49,bf);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Events_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Events_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Events_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Events_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace components
} // end namespace _Slider
