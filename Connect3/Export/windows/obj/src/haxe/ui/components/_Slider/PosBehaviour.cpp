// Generated by Haxe 4.2.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_Behaviour
#include <haxe/ui/behaviours/Behaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_DataBehaviour
#include <haxe/ui/behaviours/DataBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_ValueBehaviour
#include <haxe/ui/behaviours/ValueBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_components_Slider
#include <haxe/ui/components/Slider.h>
#endif
#ifndef INCLUDED_haxe_ui_components__Slider_PosBehaviour
#include <haxe/ui/components/_Slider/PosBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IDirectionalComponent
#include <haxe/ui/core/IDirectionalComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_core_InteractiveComponent
#include <haxe/ui/core/InteractiveComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_focus_IFocusable
#include <haxe/ui/focus/IFocusable.h>
#endif
#ifndef INCLUDED_haxe_ui_util_VariantType
#include <haxe/ui/util/VariantType.h>
#endif
#ifndef INCLUDED_haxe_ui_util__Variant_Variant_Impl_
#include <haxe/ui/util/_Variant/Variant_Impl_.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <haxe/ui/validation/IValidating.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e5af7442d9de1b88_111_new,"haxe.ui.components._Slider.PosBehaviour","new",0x2201ee6f,"haxe.ui.components._Slider.PosBehaviour.new","haxe/ui/components/Slider.hx",111,0x55cb8456)
HX_LOCAL_STACK_FRAME(_hx_pos_e5af7442d9de1b88_113_get,"haxe.ui.components._Slider.PosBehaviour","get",0x21fc9ea5,"haxe.ui.components._Slider.PosBehaviour.get","haxe/ui/components/Slider.hx",113,0x55cb8456)
HX_LOCAL_STACK_FRAME(_hx_pos_e5af7442d9de1b88_117_validateData,"haxe.ui.components._Slider.PosBehaviour","validateData",0xcd5e7df1,"haxe.ui.components._Slider.PosBehaviour.validateData","haxe/ui/components/Slider.hx",117,0x55cb8456)
namespace haxe{
namespace ui{
namespace components{
namespace _Slider{

void PosBehaviour_obj::__construct( ::haxe::ui::core::Component component){
            	HX_STACKFRAME(&_hx_pos_e5af7442d9de1b88_111_new)
HXDLIN( 111)		super::__construct(component);
            	}

Dynamic PosBehaviour_obj::__CreateEmpty() { return new PosBehaviour_obj; }

void *PosBehaviour_obj::_hx_vtable = 0;

Dynamic PosBehaviour_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PosBehaviour_obj > _hx_result = new PosBehaviour_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PosBehaviour_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3c5dd90d) {
		if (inClassId<=(int)0x37b9aa84) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x37b9aa84;
		} else {
			return inClassId==(int)0x3c5dd90d;
		}
	} else {
		return inClassId==(int)0x57724471 || inClassId==(int)0x7e17fa9f;
	}
}

 ::haxe::ui::util::VariantType PosBehaviour_obj::get(){
            	HX_STACKFRAME(&_hx_pos_e5af7442d9de1b88_113_get)
HXDLIN( 113)		return ::haxe::ui::util::_Variant::Variant_Impl__obj::fromFloat(::hx::TCast<  ::haxe::ui::components::Slider >::cast(this->_component)->get_end());
            	}


void PosBehaviour_obj::validateData(){
            	HX_STACKFRAME(&_hx_pos_e5af7442d9de1b88_117_validateData)
HXDLIN( 117)		 ::haxe::ui::components::Slider _hx_tmp = ::hx::TCast<  ::haxe::ui::components::Slider >::cast(this->_component);
HXDLIN( 117)		_hx_tmp->set_end(( (Float)(::haxe::ui::util::_Variant::Variant_Impl__obj::toFloat(this->_value)) ));
            	}



::hx::ObjectPtr< PosBehaviour_obj > PosBehaviour_obj::__new( ::haxe::ui::core::Component component) {
	::hx::ObjectPtr< PosBehaviour_obj > __this = new PosBehaviour_obj();
	__this->__construct(component);
	return __this;
}

::hx::ObjectPtr< PosBehaviour_obj > PosBehaviour_obj::__alloc(::hx::Ctx *_hx_ctx, ::haxe::ui::core::Component component) {
	PosBehaviour_obj *__this = (PosBehaviour_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PosBehaviour_obj), true, "haxe.ui.components._Slider.PosBehaviour"));
	*(void **)__this = PosBehaviour_obj::_hx_vtable;
	__this->__construct(component);
	return __this;
}

PosBehaviour_obj::PosBehaviour_obj()
{
}

::hx::Val PosBehaviour_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return ::hx::Val( get_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"validateData") ) { return ::hx::Val( validateData_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *PosBehaviour_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *PosBehaviour_obj_sStaticStorageInfo = 0;
#endif

static ::String PosBehaviour_obj_sMemberFields[] = {
	HX_("get",96,80,4e,00),
	HX_("validateData",e0,55,63,96),
	::String(null()) };

::hx::Class PosBehaviour_obj::__mClass;

void PosBehaviour_obj::__register()
{
	PosBehaviour_obj _hx_dummy;
	PosBehaviour_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.components._Slider.PosBehaviour",fd,8a,d8,be);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PosBehaviour_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PosBehaviour_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PosBehaviour_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PosBehaviour_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace components
} // end namespace _Slider
