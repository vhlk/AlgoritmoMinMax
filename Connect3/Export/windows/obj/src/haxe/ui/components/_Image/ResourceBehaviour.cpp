// Generated by Haxe 4.2.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ImageBase
#include <haxe/ui/backend/ImageBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ImageDisplayImpl
#include <haxe/ui/backend/ImageDisplayImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ImageSurface
#include <haxe/ui/backend/ImageSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_Behaviour
#include <haxe/ui/behaviours/Behaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_DataBehaviour
#include <haxe/ui/behaviours/DataBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_ValueBehaviour
#include <haxe/ui/behaviours/ValueBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_components_Image
#include <haxe/ui/components/Image.h>
#endif
#ifndef INCLUDED_haxe_ui_components__Image_ResourceBehaviour
#include <haxe/ui/components/_Image/ResourceBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ImageDisplay
#include <haxe/ui/core/ImageDisplay.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_ILayout
#include <haxe/ui/layouts/ILayout.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_Layout
#include <haxe/ui/layouts/Layout.h>
#endif
#ifndef INCLUDED_haxe_ui_util_ImageLoader
#include <haxe/ui/util/ImageLoader.h>
#endif
#ifndef INCLUDED_haxe_ui_util_VariantType
#include <haxe/ui/util/VariantType.h>
#endif
#ifndef INCLUDED_haxe_ui_util__Variant_Variant_Impl_
#include <haxe/ui/util/_Variant/Variant_Impl_.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <haxe/ui/validation/IValidating.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2bce414617decee2_167_new,"haxe.ui.components._Image.ResourceBehaviour","new",0xc7c85df5,"haxe.ui.components._Image.ResourceBehaviour.new","haxe/ui/components/Image.hx",167,0xeed4974a)
HX_LOCAL_STACK_FRAME(_hx_pos_2bce414617decee2_177_validateData,"haxe.ui.components._Image.ResourceBehaviour","validateData",0x2fccedab,"haxe.ui.components._Image.ResourceBehaviour.validateData","haxe/ui/components/Image.hx",177,0xeed4974a)
HX_LOCAL_STACK_FRAME(_hx_pos_2bce414617decee2_168_validateData,"haxe.ui.components._Image.ResourceBehaviour","validateData",0x2fccedab,"haxe.ui.components._Image.ResourceBehaviour.validateData","haxe/ui/components/Image.hx",168,0xeed4974a)
namespace haxe{
namespace ui{
namespace components{
namespace _Image{

void ResourceBehaviour_obj::__construct( ::haxe::ui::core::Component component){
            	HX_STACKFRAME(&_hx_pos_2bce414617decee2_167_new)
HXDLIN( 167)		super::__construct(component);
            	}

Dynamic ResourceBehaviour_obj::__CreateEmpty() { return new ResourceBehaviour_obj; }

void *ResourceBehaviour_obj::_hx_vtable = 0;

Dynamic ResourceBehaviour_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ResourceBehaviour_obj > _hx_result = new ResourceBehaviour_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ResourceBehaviour_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3c5dd90d) {
		if (inClassId<=(int)0x37b9aa84) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x37b9aa84;
		} else {
			return inClassId==(int)0x3c5dd90d;
		}
	} else {
		return inClassId==(int)0x4a102d23 || inClassId==(int)0x7e17fa9f;
	}
}

void ResourceBehaviour_obj::validateData(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::haxe::ui::components::_Image::ResourceBehaviour,_gthis) HXARGC(1)
            		void _hx_run( ::Dynamic imageInfo){
            			HX_GC_STACKFRAME(&_hx_pos_2bce414617decee2_177_validateData)
HXLINE( 177)			if (::hx::IsNotNull( imageInfo )) {
HXLINE( 178)				bool _hx_tmp;
HXDLIN( 178)				if (::hx::IsNotNull( _gthis->_value )) {
HXLINE( 178)					_hx_tmp = ::haxe::ui::util::_Variant::Variant_Impl__obj::get_isNull(_gthis->_value);
            				}
            				else {
HXLINE( 178)					_hx_tmp = true;
            				}
HXDLIN( 178)				if (_hx_tmp) {
HXLINE( 179)					_gthis->_component->removeImageDisplay();
HXLINE( 180)					_gthis->_component->invalidateComponent(null());
HXLINE( 181)					return;
            				}
HXLINE( 184)				 ::haxe::ui::components::Image image = ::hx::TCast<  ::haxe::ui::components::Image >::cast(_gthis->_component);
HXLINE( 185)				 ::haxe::ui::core::ImageDisplay display = image->getImageDisplay();
HXLINE( 186)				if (::hx::IsNotNull( display )) {
HXLINE( 187)					display->set_imageInfo(imageInfo);
HXLINE( 188)					image->set_originalWidth(( (Float)(imageInfo->__Field(HX_("width",06,b6,62,ca),::hx::paccDynamic)) ));
HXLINE( 189)					image->set_originalHeight(( (Float)(imageInfo->__Field(HX_("height",e7,07,4c,02),::hx::paccDynamic)) ));
HXLINE( 190)					bool _hx_tmp;
HXDLIN( 190)					if ((image->autoSize() == true)) {
HXLINE( 190)						_hx_tmp = ::hx::IsNotNull( image->parentComponent );
            					}
            					else {
HXLINE( 190)						_hx_tmp = false;
            					}
HXDLIN( 190)					if (_hx_tmp) {
HXLINE( 191)						 ::haxe::ui::core::Component _this = image->parentComponent;
HXDLIN( 191)						bool _hx_tmp;
HXDLIN( 191)						if (::hx::IsNotNull( _this->_layout )) {
HXLINE( 191)							_hx_tmp = (_this->_layoutLocked == true);
            						}
            						else {
HXLINE( 191)							_hx_tmp = true;
            						}
HXDLIN( 191)						if (!(_hx_tmp)) {
HXLINE( 191)							_this->invalidateComponent(HX_("layout",aa,ae,b8,58));
            						}
            					}
HXLINE( 193)					image->invalidateComponent(null());
HXLINE( 194)					display->validateComponent();
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_2bce414617decee2_168_validateData)
HXDLIN( 168)		 ::haxe::ui::components::_Image::ResourceBehaviour _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 169)		bool _hx_tmp;
HXDLIN( 169)		if (::hx::IsNotNull( this->_value )) {
HXLINE( 169)			_hx_tmp = ::haxe::ui::util::_Variant::Variant_Impl__obj::get_isNull(this->_value);
            		}
            		else {
HXLINE( 169)			_hx_tmp = true;
            		}
HXDLIN( 169)		if (_hx_tmp) {
HXLINE( 170)			this->_component->removeImageDisplay();
HXLINE( 171)			this->_component->invalidateComponent(null());
HXLINE( 172)			return;
            		}
HXLINE( 175)		 ::haxe::ui::util::ImageLoader imageLoader =  ::haxe::ui::util::ImageLoader_obj::__alloc( HX_CTX ,this->_value);
HXLINE( 176)		imageLoader->load( ::Dynamic(new _hx_Closure_0(_gthis)));
            	}



::hx::ObjectPtr< ResourceBehaviour_obj > ResourceBehaviour_obj::__new( ::haxe::ui::core::Component component) {
	::hx::ObjectPtr< ResourceBehaviour_obj > __this = new ResourceBehaviour_obj();
	__this->__construct(component);
	return __this;
}

::hx::ObjectPtr< ResourceBehaviour_obj > ResourceBehaviour_obj::__alloc(::hx::Ctx *_hx_ctx, ::haxe::ui::core::Component component) {
	ResourceBehaviour_obj *__this = (ResourceBehaviour_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ResourceBehaviour_obj), true, "haxe.ui.components._Image.ResourceBehaviour"));
	*(void **)__this = ResourceBehaviour_obj::_hx_vtable;
	__this->__construct(component);
	return __this;
}

ResourceBehaviour_obj::ResourceBehaviour_obj()
{
}

::hx::Val ResourceBehaviour_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"validateData") ) { return ::hx::Val( validateData_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ResourceBehaviour_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ResourceBehaviour_obj_sStaticStorageInfo = 0;
#endif

static ::String ResourceBehaviour_obj_sMemberFields[] = {
	HX_("validateData",e0,55,63,96),
	::String(null()) };

::hx::Class ResourceBehaviour_obj::__mClass;

void ResourceBehaviour_obj::__register()
{
	ResourceBehaviour_obj _hx_dummy;
	ResourceBehaviour_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.components._Image.ResourceBehaviour",83,3f,83,7f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ResourceBehaviour_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ResourceBehaviour_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ResourceBehaviour_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ResourceBehaviour_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace components
} // end namespace _Image
