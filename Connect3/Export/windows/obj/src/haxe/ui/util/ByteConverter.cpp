// Generated by Haxe 4.2.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_ui_util_ByteConverter
#include <haxe/ui/util/ByteConverter.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_1b41f07da7017832_16_fromHaxeBytes,"haxe.ui.util.ByteConverter","fromHaxeBytes",0xf8fa8e2b,"haxe.ui.util.ByteConverter.fromHaxeBytes","haxe/ui/util/ByteConverter.hx",16,0x7b0b31e1)
HX_LOCAL_STACK_FRAME(_hx_pos_1b41f07da7017832_24_toHaxeBytes,"haxe.ui.util.ByteConverter","toHaxeBytes",0x7d20fffa,"haxe.ui.util.ByteConverter.toHaxeBytes","haxe/ui/util/ByteConverter.hx",24,0x7b0b31e1)
namespace haxe{
namespace ui{
namespace util{

void ByteConverter_obj::__construct() { }

Dynamic ByteConverter_obj::__CreateEmpty() { return new ByteConverter_obj; }

void *ByteConverter_obj::_hx_vtable = 0;

Dynamic ByteConverter_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ByteConverter_obj > _hx_result = new ByteConverter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ByteConverter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7f56084c;
}

 ::openfl::utils::ByteArrayData ByteConverter_obj::fromHaxeBytes( ::haxe::io::Bytes bytes){
            	HX_GC_STACKFRAME(&_hx_pos_1b41f07da7017832_16_fromHaxeBytes)
HXLINE(  17)		 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,0);
HXDLIN(  17)		 ::openfl::utils::ByteArrayData ba = this1;
HXLINE(  18)		{
HXLINE(  18)			int _g = 0;
HXDLIN(  18)			int _g1 = bytes->length;
HXDLIN(  18)			while((_g < _g1)){
HXLINE(  18)				_g = (_g + 1);
HXDLIN(  18)				int a = (_g - 1);
HXLINE(  19)				ba->writeByte(( (int)(_hx_array_unsafe_get(bytes->b,a)) ));
            			}
            		}
HXLINE(  21)		return ba;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ByteConverter_obj,fromHaxeBytes,return )

 ::haxe::io::Bytes ByteConverter_obj::toHaxeBytes( ::openfl::utils::ByteArrayData ba){
            	HX_STACKFRAME(&_hx_pos_1b41f07da7017832_24_toHaxeBytes)
HXLINE(  25)		 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc(::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(ba));
HXLINE(  26)		{
HXLINE(  26)			int _g = 0;
HXDLIN(  26)			int _g1 = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(ba);
HXDLIN(  26)			while((_g < _g1)){
HXLINE(  26)				_g = (_g + 1);
HXDLIN(  26)				int a = (_g - 1);
HXLINE(  27)				{
HXLINE(  27)					int v = ba->readByte();
HXDLIN(  27)					bytes->b[a] = ( (unsigned char)(v) );
            				}
            			}
            		}
HXLINE(  29)		return bytes;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ByteConverter_obj,toHaxeBytes,return )


ByteConverter_obj::ByteConverter_obj()
{
}

bool ByteConverter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"toHaxeBytes") ) { outValue = toHaxeBytes_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fromHaxeBytes") ) { outValue = fromHaxeBytes_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ByteConverter_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ByteConverter_obj_sStaticStorageInfo = 0;
#endif

::hx::Class ByteConverter_obj::__mClass;

static ::String ByteConverter_obj_sStaticFields[] = {
	HX_("fromHaxeBytes",9b,b7,f9,02),
	HX_("toHaxeBytes",6a,ed,f5,f5),
	::String(null())
};

void ByteConverter_obj::__register()
{
	ByteConverter_obj _hx_dummy;
	ByteConverter_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.util.ByteConverter",fe,da,69,9d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ByteConverter_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ByteConverter_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ByteConverter_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ByteConverter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ByteConverter_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace util
