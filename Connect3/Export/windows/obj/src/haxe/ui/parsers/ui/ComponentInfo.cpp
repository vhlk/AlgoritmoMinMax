// Generated by Haxe 4.2.0
#include <hxcpp.h>

#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_ui_parsers_ui_ComponentInfo
#include <haxe/ui/parsers/ui/ComponentInfo.h>
#endif
#ifndef INCLUDED_haxe_ui_parsers_ui_ComponentStyleInfo
#include <haxe/ui/parsers/ui/ComponentStyleInfo.h>
#endif
#ifndef INCLUDED_haxe_ui_parsers_ui_LayoutInfo
#include <haxe/ui/parsers/ui/LayoutInfo.h>
#endif
#ifndef INCLUDED_haxe_ui_util_StringUtil
#include <haxe/ui/util/StringUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7e5c70287155cdc1_39_new,"haxe.ui.parsers.ui.ComponentInfo","new",0xb367ab8f,"haxe.ui.parsers.ui.ComponentInfo.new","haxe/ui/parsers/ui/ComponentInfo.hx",39,0x65fc7ec1)
HX_LOCAL_STACK_FRAME(_hx_pos_7e5c70287155cdc1_47_get_styleString,"haxe.ui.parsers.ui.ComponentInfo","get_styleString",0x46f0da28,"haxe.ui.parsers.ui.ComponentInfo.get_styleString","haxe/ui/parsers/ui/ComponentInfo.hx",47,0x65fc7ec1)
HX_LOCAL_STACK_FRAME(_hx_pos_7e5c70287155cdc1_55_get_dataString,"haxe.ui.parsers.ui.ComponentInfo","get_dataString",0x97809c15,"haxe.ui.parsers.ui.ComponentInfo.get_dataString","haxe/ui/parsers/ui/ComponentInfo.hx",55,0x65fc7ec1)
HX_LOCAL_STACK_FRAME(_hx_pos_7e5c70287155cdc1_62_findRootComponent,"haxe.ui.parsers.ui.ComponentInfo","findRootComponent",0xe6e78db1,"haxe.ui.parsers.ui.ComponentInfo.findRootComponent","haxe/ui/parsers/ui/ComponentInfo.hx",62,0x65fc7ec1)
HX_LOCAL_STACK_FRAME(_hx_pos_7e5c70287155cdc1_70_validate,"haxe.ui.parsers.ui.ComponentInfo","validate",0x3fbc0b07,"haxe.ui.parsers.ui.ComponentInfo.validate","haxe/ui/parsers/ui/ComponentInfo.hx",70,0x65fc7ec1)
namespace haxe{
namespace ui{
namespace parsers{
namespace ui{

void ComponentInfo_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_7e5c70287155cdc1_39_new)
HXLINE(  40)		this->properties =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  41)		this->children = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  42)		this->scriptlets = ::Array_obj< ::String >::__new(0);
HXLINE(  43)		this->styles = ::Array_obj< ::Dynamic>::__new(0);
            	}

Dynamic ComponentInfo_obj::__CreateEmpty() { return new ComponentInfo_obj; }

void *ComponentInfo_obj::_hx_vtable = 0;

Dynamic ComponentInfo_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ComponentInfo_obj > _hx_result = new ComponentInfo_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ComponentInfo_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3e20eba5;
}

::String ComponentInfo_obj::get_styleString(){
            	HX_STACKFRAME(&_hx_pos_7e5c70287155cdc1_47_get_styleString)
HXLINE(  48)		if (::hx::IsNull( this->style )) {
HXLINE(  49)			return null();
            		}
HXLINE(  51)		return ::StringTools_obj::replace(this->style,HX_("\"",22,00,00,00),HX_("'",27,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ComponentInfo_obj,get_styleString,return )

::String ComponentInfo_obj::get_dataString(){
            	HX_STACKFRAME(&_hx_pos_7e5c70287155cdc1_55_get_dataString)
HXLINE(  56)		if (::hx::IsNull( this->data )) {
HXLINE(  57)			return null();
            		}
HXLINE(  59)		return ::StringTools_obj::replace(this->data,HX_("\"",22,00,00,00),HX_("'",27,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ComponentInfo_obj,get_dataString,return )

 ::haxe::ui::parsers::ui::ComponentInfo ComponentInfo_obj::findRootComponent(){
            	HX_STACKFRAME(&_hx_pos_7e5c70287155cdc1_62_findRootComponent)
HXLINE(  63)		 ::haxe::ui::parsers::ui::ComponentInfo r = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  64)		while(::hx::IsNotNull( r->parent )){
HXLINE(  65)			r = r->parent;
            		}
HXLINE(  67)		return r;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ComponentInfo_obj,findRootComponent,return )

void ComponentInfo_obj::validate(){
            	HX_GC_STACKFRAME(&_hx_pos_7e5c70287155cdc1_70_validate)
HXLINE(  71)		::Array< ::String > propsToRemove = ::Array_obj< ::String >::__new(0);
HXLINE(  72)		bool _hx_tmp;
HXDLIN(  72)		if (::hx::IsNotNull( this->layoutName )) {
HXLINE(  72)			_hx_tmp = ::hx::IsNull( this->layout );
            		}
            		else {
HXLINE(  72)			_hx_tmp = false;
            		}
HXDLIN(  72)		if (_hx_tmp) {
HXLINE(  73)			this->layout =  ::haxe::ui::parsers::ui::LayoutInfo_obj::__alloc( HX_CTX );
HXLINE(  74)			this->layout->type = this->layoutName;
HXLINE(  75)			{
HXLINE(  75)				 ::Dynamic propName = this->properties->keys();
HXDLIN(  75)				while(( (bool)(propName->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  75)					::String propName1 = ( (::String)(propName->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  76)					if (::StringTools_obj::startsWith(propName1,HX_("layout",aa,ae,b8,58))) {
HXLINE(  77)						::String propValue = this->properties->get_string(propName1);
HXLINE(  78)						propsToRemove->push(propName1);
HXLINE(  79)						propName1 = ::StringTools_obj::replace(propName1,HX_("layout",aa,ae,b8,58),HX_("",00,00,00,00));
HXLINE(  80)						propName1 = ::haxe::ui::util::StringUtil_obj::uncapitalizeFirstLetter(propName1);
HXLINE(  81)						this->layout->properties->set(propName1,propValue);
            					}
            				}
            			}
            		}
HXLINE(  86)		{
HXLINE(  86)			int _g = 0;
HXDLIN(  86)			while((_g < propsToRemove->length)){
HXLINE(  86)				::String propName = propsToRemove->__get(_g);
HXDLIN(  86)				_g = (_g + 1);
HXLINE(  87)				this->properties->remove(propName);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ComponentInfo_obj,validate,(void))


::hx::ObjectPtr< ComponentInfo_obj > ComponentInfo_obj::__new() {
	::hx::ObjectPtr< ComponentInfo_obj > __this = new ComponentInfo_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< ComponentInfo_obj > ComponentInfo_obj::__alloc(::hx::Ctx *_hx_ctx) {
	ComponentInfo_obj *__this = (ComponentInfo_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ComponentInfo_obj), true, "haxe.ui.parsers.ui.ComponentInfo"));
	*(void **)__this = ComponentInfo_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ComponentInfo_obj::ComponentInfo_obj()
{
}

void ComponentInfo_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ComponentInfo);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(left,"left");
	HX_MARK_MEMBER_NAME(top,"top");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(percentWidth,"percentWidth");
	HX_MARK_MEMBER_NAME(percentHeight,"percentHeight");
	HX_MARK_MEMBER_NAME(contentWidth,"contentWidth");
	HX_MARK_MEMBER_NAME(contentHeight,"contentHeight");
	HX_MARK_MEMBER_NAME(percentContentWidth,"percentContentWidth");
	HX_MARK_MEMBER_NAME(percentContentHeight,"percentContentHeight");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(style,"style");
	HX_MARK_MEMBER_NAME(styleNames,"styleNames");
	HX_MARK_MEMBER_NAME(composite,"composite");
	HX_MARK_MEMBER_NAME(layoutName,"layoutName");
	HX_MARK_MEMBER_NAME(direction,"direction");
	HX_MARK_MEMBER_NAME(properties,"properties");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(children,"children");
	HX_MARK_MEMBER_NAME(layout,"layout");
	HX_MARK_MEMBER_NAME(scriptlets,"scriptlets");
	HX_MARK_MEMBER_NAME(styles,"styles");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(condition,"condition");
	HX_MARK_MEMBER_NAME(resolvedClassName,"resolvedClassName");
	HX_MARK_END_CLASS();
}

void ComponentInfo_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(left,"left");
	HX_VISIT_MEMBER_NAME(top,"top");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(percentWidth,"percentWidth");
	HX_VISIT_MEMBER_NAME(percentHeight,"percentHeight");
	HX_VISIT_MEMBER_NAME(contentWidth,"contentWidth");
	HX_VISIT_MEMBER_NAME(contentHeight,"contentHeight");
	HX_VISIT_MEMBER_NAME(percentContentWidth,"percentContentWidth");
	HX_VISIT_MEMBER_NAME(percentContentHeight,"percentContentHeight");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(style,"style");
	HX_VISIT_MEMBER_NAME(styleNames,"styleNames");
	HX_VISIT_MEMBER_NAME(composite,"composite");
	HX_VISIT_MEMBER_NAME(layoutName,"layoutName");
	HX_VISIT_MEMBER_NAME(direction,"direction");
	HX_VISIT_MEMBER_NAME(properties,"properties");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(children,"children");
	HX_VISIT_MEMBER_NAME(layout,"layout");
	HX_VISIT_MEMBER_NAME(scriptlets,"scriptlets");
	HX_VISIT_MEMBER_NAME(styles,"styles");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(condition,"condition");
	HX_VISIT_MEMBER_NAME(resolvedClassName,"resolvedClassName");
}

::hx::Val ComponentInfo_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return ::hx::Val( id ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { return ::hx::Val( top ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return ::hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"left") ) { return ::hx::Val( left ); }
		if (HX_FIELD_EQ(inName,"text") ) { return ::hx::Val( text ); }
		if (HX_FIELD_EQ(inName,"data") ) { return ::hx::Val( data ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"style") ) { return ::hx::Val( style ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"parent") ) { return ::hx::Val( parent ); }
		if (HX_FIELD_EQ(inName,"layout") ) { return ::hx::Val( layout ); }
		if (HX_FIELD_EQ(inName,"styles") ) { return ::hx::Val( styles ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"children") ) { return ::hx::Val( children ); }
		if (HX_FIELD_EQ(inName,"validate") ) { return ::hx::Val( validate_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"composite") ) { return ::hx::Val( composite ); }
		if (HX_FIELD_EQ(inName,"direction") ) { return ::hx::Val( direction ); }
		if (HX_FIELD_EQ(inName,"condition") ) { return ::hx::Val( condition ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"styleNames") ) { return ::hx::Val( styleNames ); }
		if (HX_FIELD_EQ(inName,"layoutName") ) { return ::hx::Val( layoutName ); }
		if (HX_FIELD_EQ(inName,"properties") ) { return ::hx::Val( properties ); }
		if (HX_FIELD_EQ(inName,"scriptlets") ) { return ::hx::Val( scriptlets ); }
		if (HX_FIELD_EQ(inName,"dataString") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_dataString() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"styleString") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_styleString() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"percentWidth") ) { return ::hx::Val( percentWidth ); }
		if (HX_FIELD_EQ(inName,"contentWidth") ) { return ::hx::Val( contentWidth ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"percentHeight") ) { return ::hx::Val( percentHeight ); }
		if (HX_FIELD_EQ(inName,"contentHeight") ) { return ::hx::Val( contentHeight ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_dataString") ) { return ::hx::Val( get_dataString_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_styleString") ) { return ::hx::Val( get_styleString_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"resolvedClassName") ) { return ::hx::Val( resolvedClassName ); }
		if (HX_FIELD_EQ(inName,"findRootComponent") ) { return ::hx::Val( findRootComponent_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"percentContentWidth") ) { return ::hx::Val( percentContentWidth ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"percentContentHeight") ) { return ::hx::Val( percentContentHeight ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ComponentInfo_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { top=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"left") ) { left=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"text") ) { text=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"style") ) { style=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::haxe::ui::parsers::ui::ComponentInfo >(); return inValue; }
		if (HX_FIELD_EQ(inName,"layout") ) { layout=inValue.Cast<  ::haxe::ui::parsers::ui::LayoutInfo >(); return inValue; }
		if (HX_FIELD_EQ(inName,"styles") ) { styles=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"children") ) { children=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"composite") ) { composite=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"direction") ) { direction=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"condition") ) { condition=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"styleNames") ) { styleNames=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"layoutName") ) { layoutName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"properties") ) { properties=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scriptlets") ) { scriptlets=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"percentWidth") ) { percentWidth=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"contentWidth") ) { contentWidth=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"percentHeight") ) { percentHeight=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"contentHeight") ) { contentHeight=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"resolvedClassName") ) { resolvedClassName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"percentContentWidth") ) { percentContentWidth=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"percentContentHeight") ) { percentContentHeight=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ComponentInfo_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("left",07,08,b0,47));
	outFields->push(HX_("top",95,66,58,00));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("percentWidth",01,51,1b,fe));
	outFields->push(HX_("percentHeight",8c,08,1b,10));
	outFields->push(HX_("contentWidth",0d,0a,f1,b0));
	outFields->push(HX_("contentHeight",00,3a,47,d8));
	outFields->push(HX_("percentContentWidth",72,94,55,51));
	outFields->push(HX_("percentContentHeight",fb,c7,db,8f));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("style",31,a5,1d,84));
	outFields->push(HX_("styleNames",d7,e8,7a,16));
	outFields->push(HX_("composite",07,10,a5,12));
	outFields->push(HX_("layoutName",15,ea,9e,e3));
	outFields->push(HX_("direction",3f,62,40,10));
	outFields->push(HX_("properties",f3,fb,0e,61));
	outFields->push(HX_("parent",2a,05,7e,ed));
	outFields->push(HX_("children",3f,19,6a,70));
	outFields->push(HX_("layout",aa,ae,b8,58));
	outFields->push(HX_("scriptlets",c3,c3,b7,55));
	outFields->push(HX_("styles",22,e6,d2,15));
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("condition",9b,e9,33,fc));
	outFields->push(HX_("resolvedClassName",8b,b7,1c,6b));
	outFields->push(HX_("styleString",e2,bc,c7,88));
	outFields->push(HX_("dataString",9b,ee,d1,fc));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ComponentInfo_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(ComponentInfo_obj,type),HX_("type",ba,f2,08,4d)},
	{::hx::fsString,(int)offsetof(ComponentInfo_obj,id),HX_("id",db,5b,00,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ComponentInfo_obj,left),HX_("left",07,08,b0,47)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ComponentInfo_obj,top),HX_("top",95,66,58,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ComponentInfo_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ComponentInfo_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ComponentInfo_obj,percentWidth),HX_("percentWidth",01,51,1b,fe)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ComponentInfo_obj,percentHeight),HX_("percentHeight",8c,08,1b,10)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ComponentInfo_obj,contentWidth),HX_("contentWidth",0d,0a,f1,b0)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ComponentInfo_obj,contentHeight),HX_("contentHeight",00,3a,47,d8)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ComponentInfo_obj,percentContentWidth),HX_("percentContentWidth",72,94,55,51)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ComponentInfo_obj,percentContentHeight),HX_("percentContentHeight",fb,c7,db,8f)},
	{::hx::fsString,(int)offsetof(ComponentInfo_obj,text),HX_("text",ad,cc,f9,4c)},
	{::hx::fsString,(int)offsetof(ComponentInfo_obj,style),HX_("style",31,a5,1d,84)},
	{::hx::fsString,(int)offsetof(ComponentInfo_obj,styleNames),HX_("styleNames",d7,e8,7a,16)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ComponentInfo_obj,composite),HX_("composite",07,10,a5,12)},
	{::hx::fsString,(int)offsetof(ComponentInfo_obj,layoutName),HX_("layoutName",15,ea,9e,e3)},
	{::hx::fsString,(int)offsetof(ComponentInfo_obj,direction),HX_("direction",3f,62,40,10)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(ComponentInfo_obj,properties),HX_("properties",f3,fb,0e,61)},
	{::hx::fsObject /*  ::haxe::ui::parsers::ui::ComponentInfo */ ,(int)offsetof(ComponentInfo_obj,parent),HX_("parent",2a,05,7e,ed)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ComponentInfo_obj,children),HX_("children",3f,19,6a,70)},
	{::hx::fsObject /*  ::haxe::ui::parsers::ui::LayoutInfo */ ,(int)offsetof(ComponentInfo_obj,layout),HX_("layout",aa,ae,b8,58)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(ComponentInfo_obj,scriptlets),HX_("scriptlets",c3,c3,b7,55)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ComponentInfo_obj,styles),HX_("styles",22,e6,d2,15)},
	{::hx::fsString,(int)offsetof(ComponentInfo_obj,data),HX_("data",2a,56,63,42)},
	{::hx::fsString,(int)offsetof(ComponentInfo_obj,condition),HX_("condition",9b,e9,33,fc)},
	{::hx::fsString,(int)offsetof(ComponentInfo_obj,resolvedClassName),HX_("resolvedClassName",8b,b7,1c,6b)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ComponentInfo_obj_sStaticStorageInfo = 0;
#endif

static ::String ComponentInfo_obj_sMemberFields[] = {
	HX_("type",ba,f2,08,4d),
	HX_("id",db,5b,00,00),
	HX_("left",07,08,b0,47),
	HX_("top",95,66,58,00),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("percentWidth",01,51,1b,fe),
	HX_("percentHeight",8c,08,1b,10),
	HX_("contentWidth",0d,0a,f1,b0),
	HX_("contentHeight",00,3a,47,d8),
	HX_("percentContentWidth",72,94,55,51),
	HX_("percentContentHeight",fb,c7,db,8f),
	HX_("text",ad,cc,f9,4c),
	HX_("style",31,a5,1d,84),
	HX_("styleNames",d7,e8,7a,16),
	HX_("composite",07,10,a5,12),
	HX_("layoutName",15,ea,9e,e3),
	HX_("direction",3f,62,40,10),
	HX_("properties",f3,fb,0e,61),
	HX_("parent",2a,05,7e,ed),
	HX_("children",3f,19,6a,70),
	HX_("layout",aa,ae,b8,58),
	HX_("scriptlets",c3,c3,b7,55),
	HX_("styles",22,e6,d2,15),
	HX_("data",2a,56,63,42),
	HX_("condition",9b,e9,33,fc),
	HX_("resolvedClassName",8b,b7,1c,6b),
	HX_("get_styleString",79,74,a9,49),
	HX_("get_dataString",e4,76,c7,72),
	HX_("findRootComponent",42,1e,b8,7c),
	HX_("validate",96,d0,e3,04),
	::String(null()) };

::hx::Class ComponentInfo_obj::__mClass;

void ComponentInfo_obj::__register()
{
	ComponentInfo_obj _hx_dummy;
	ComponentInfo_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.parsers.ui.ComponentInfo",1d,38,11,15);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ComponentInfo_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ComponentInfo_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ComponentInfo_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ComponentInfo_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace parsers
} // end namespace ui
