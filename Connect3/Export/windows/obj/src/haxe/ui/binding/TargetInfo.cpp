// Generated by Haxe 4.2.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_binding_PropertyInfo
#include <haxe/ui/binding/PropertyInfo.h>
#endif
#ifndef INCLUDED_haxe_ui_binding_TargetInfo
#include <haxe/ui/binding/TargetInfo.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <haxe/ui/validation/IValidating.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7388e0438d503ac4_40_new,"haxe.ui.binding.TargetInfo","new",0x01fe548c,"haxe.ui.binding.TargetInfo.new","haxe/ui/binding/BindingManager.hx",40,0xd9a5117a)
HX_LOCAL_STACK_FRAME(_hx_pos_7388e0438d503ac4_45_addBinding,"haxe.ui.binding.TargetInfo","addBinding",0xa5d15078,"haxe.ui.binding.TargetInfo.addBinding","haxe/ui/binding/BindingManager.hx",45,0xd9a5117a)
namespace haxe{
namespace ui{
namespace binding{

void TargetInfo_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_7388e0438d503ac4_40_new)
HXDLIN(  40)		this->props =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}

Dynamic TargetInfo_obj::__CreateEmpty() { return new TargetInfo_obj; }

void *TargetInfo_obj::_hx_vtable = 0;

Dynamic TargetInfo_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TargetInfo_obj > _hx_result = new TargetInfo_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TargetInfo_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7fe8d1a6;
}

void TargetInfo_obj::addBinding(::String sourceProp, ::haxe::ui::core::Component target, ::haxe::ui::binding::PropertyInfo targetProp){
            	HX_GC_STACKFRAME(&_hx_pos_7388e0438d503ac4_45_addBinding)
HXLINE(  46)		 ::haxe::ds::ObjectMap map = ( ( ::haxe::ds::ObjectMap)(this->props->get(sourceProp)) );
HXLINE(  47)		if (::hx::IsNull( map )) {
HXLINE(  48)			map =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
HXLINE(  49)			this->props->set(sourceProp,map);
            		}
HXLINE(  52)		::Array< ::Dynamic> array = ( (::Array< ::Dynamic>)(map->get(target)) );
HXLINE(  53)		if (::hx::IsNull( array )) {
HXLINE(  54)			array = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  55)			map->set(target,array);
            		}
HXLINE(  58)		array->push(targetProp);
            	}


HX_DEFINE_DYNAMIC_FUNC3(TargetInfo_obj,addBinding,(void))


::hx::ObjectPtr< TargetInfo_obj > TargetInfo_obj::__new() {
	::hx::ObjectPtr< TargetInfo_obj > __this = new TargetInfo_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< TargetInfo_obj > TargetInfo_obj::__alloc(::hx::Ctx *_hx_ctx) {
	TargetInfo_obj *__this = (TargetInfo_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TargetInfo_obj), true, "haxe.ui.binding.TargetInfo"));
	*(void **)__this = TargetInfo_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TargetInfo_obj::TargetInfo_obj()
{
}

void TargetInfo_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TargetInfo);
	HX_MARK_MEMBER_NAME(props,"props");
	HX_MARK_END_CLASS();
}

void TargetInfo_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(props,"props");
}

::hx::Val TargetInfo_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"props") ) { return ::hx::Val( props ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addBinding") ) { return ::hx::Val( addBinding_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TargetInfo_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"props") ) { props=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TargetInfo_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("props",70,e7,8f,c8));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TargetInfo_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(TargetInfo_obj,props),HX_("props",70,e7,8f,c8)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TargetInfo_obj_sStaticStorageInfo = 0;
#endif

static ::String TargetInfo_obj_sMemberFields[] = {
	HX_("props",70,e7,8f,c8),
	HX_("addBinding",24,b7,b7,e6),
	::String(null()) };

::hx::Class TargetInfo_obj::__mClass;

void TargetInfo_obj::__register()
{
	TargetInfo_obj _hx_dummy;
	TargetInfo_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.binding.TargetInfo",9a,5e,06,12);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TargetInfo_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TargetInfo_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TargetInfo_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TargetInfo_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace binding
