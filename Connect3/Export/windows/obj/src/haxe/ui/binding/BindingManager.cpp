// Generated by Haxe 4.2.0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_ui_Toolkit
#include <haxe/ui/Toolkit.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_binding_BindingInfo
#include <haxe/ui/binding/BindingInfo.h>
#endif
#ifndef INCLUDED_haxe_ui_binding_BindingManager
#include <haxe/ui/binding/BindingManager.h>
#endif
#ifndef INCLUDED_haxe_ui_binding_PropertyInfo
#include <haxe/ui/binding/PropertyInfo.h>
#endif
#ifndef INCLUDED_haxe_ui_binding_TargetInfo
#include <haxe/ui/binding/TargetInfo.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IComponentBase
#include <haxe/ui/core/IComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_core_TypeMap
#include <haxe/ui/core/TypeMap.h>
#endif
#ifndef INCLUDED_haxe_ui_locale_LocaleManager
#include <haxe/ui/locale/LocaleManager.h>
#endif
#ifndef INCLUDED_haxe_ui_scripting_ScriptInterp
#include <haxe/ui/scripting/ScriptInterp.h>
#endif
#ifndef INCLUDED_haxe_ui_themes_ThemeManager
#include <haxe/ui/themes/ThemeManager.h>
#endif
#ifndef INCLUDED_haxe_ui_util_VariantType
#include <haxe/ui/util/VariantType.h>
#endif
#ifndef INCLUDED_haxe_ui_util__Variant_Variant_Impl_
#include <haxe/ui/util/_Variant/Variant_Impl_.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <haxe/ui/validation/IValidating.h>
#endif
#ifndef INCLUDED_hscript_Const
#include <hscript/Const.h>
#endif
#ifndef INCLUDED_hscript_Expr
#include <hscript/Expr.h>
#endif
#ifndef INCLUDED_hscript_Interp
#include <hscript/Interp.h>
#endif
#ifndef INCLUDED_hscript_Parser
#include <hscript/Parser.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e7708a0ade6b0fe7_80_new,"haxe.ui.binding.BindingManager","new",0x79f6a3d5,"haxe.ui.binding.BindingManager.new","haxe/ui/binding/BindingManager.hx",80,0xd9a5117a)
HX_LOCAL_STACK_FRAME(_hx_pos_e7708a0ade6b0fe7_102_refreshAll,"haxe.ui.binding.BindingManager","refreshAll",0x9ddbe731,"haxe.ui.binding.BindingManager.refreshAll","haxe/ui/binding/BindingManager.hx",102,0xd9a5117a)
HX_LOCAL_STACK_FRAME(_hx_pos_e7708a0ade6b0fe7_107_refreshFor,"haxe.ui.binding.BindingManager","refreshFor",0x9ddfb519,"haxe.ui.binding.BindingManager.refreshFor","haxe/ui/binding/BindingManager.hx",107,0xd9a5117a)
HX_LOCAL_STACK_FRAME(_hx_pos_e7708a0ade6b0fe7_120_addStaticClass,"haxe.ui.binding.BindingManager","addStaticClass",0x4c7182b4,"haxe.ui.binding.BindingManager.addStaticClass","haxe/ui/binding/BindingManager.hx",120,0xd9a5117a)
HX_LOCAL_STACK_FRAME(_hx_pos_e7708a0ade6b0fe7_123_add,"haxe.ui.binding.BindingManager","add",0x79ecc596,"haxe.ui.binding.BindingManager.add","haxe/ui/binding/BindingManager.hx",123,0xd9a5117a)
HX_LOCAL_STACK_FRAME(_hx_pos_e7708a0ade6b0fe7_126_add,"haxe.ui.binding.BindingManager","add",0x79ecc596,"haxe.ui.binding.BindingManager.add","haxe/ui/binding/BindingManager.hx",126,0xd9a5117a)
HX_LOCAL_STACK_FRAME(_hx_pos_e7708a0ade6b0fe7_166_findLanguageBinding,"haxe.ui.binding.BindingManager","findLanguageBinding",0xb86f9b09,"haxe.ui.binding.BindingManager.findLanguageBinding","haxe/ui/binding/BindingManager.hx",166,0xd9a5117a)
HX_LOCAL_STACK_FRAME(_hx_pos_e7708a0ade6b0fe7_176_addLanguageBinding,"haxe.ui.binding.BindingManager","addLanguageBinding",0x3ef168d7,"haxe.ui.binding.BindingManager.addLanguageBinding","haxe/ui/binding/BindingManager.hx",176,0xd9a5117a)
HX_LOCAL_STACK_FRAME(_hx_pos_e7708a0ade6b0fe7_221_remove,"haxe.ui.binding.BindingManager","remove",0x81819fef,"haxe.ui.binding.BindingManager.remove","haxe/ui/binding/BindingManager.hx",221,0xd9a5117a)
HX_LOCAL_STACK_FRAME(_hx_pos_e7708a0ade6b0fe7_224_cloneBinding,"haxe.ui.binding.BindingManager","cloneBinding",0x313b0b53,"haxe.ui.binding.BindingManager.cloneBinding","haxe/ui/binding/BindingManager.hx",224,0xd9a5117a)
HX_LOCAL_STACK_FRAME(_hx_pos_e7708a0ade6b0fe7_240_hasBindingInfo,"haxe.ui.binding.BindingManager","hasBindingInfo",0x0288dfc4,"haxe.ui.binding.BindingManager.hasBindingInfo","haxe/ui/binding/BindingManager.hx",240,0xd9a5117a)
HX_LOCAL_STACK_FRAME(_hx_pos_e7708a0ade6b0fe7_255_isLocaleString,"haxe.ui.binding.BindingManager","isLocaleString",0x069386c0,"haxe.ui.binding.BindingManager.isLocaleString","haxe/ui/binding/BindingManager.hx",255,0xd9a5117a)
HX_LOCAL_STACK_FRAME(_hx_pos_e7708a0ade6b0fe7_258_buildLocaleScript,"haxe.ui.binding.BindingManager","buildLocaleScript",0x276af0c8,"haxe.ui.binding.BindingManager.buildLocaleScript","haxe/ui/binding/BindingManager.hx",258,0xd9a5117a)
HX_LOCAL_STACK_FRAME(_hx_pos_e7708a0ade6b0fe7_279_componentPropChanged,"haxe.ui.binding.BindingManager","componentPropChanged",0x2fd92abf,"haxe.ui.binding.BindingManager.componentPropChanged","haxe/ui/binding/BindingManager.hx",279,0xd9a5117a)
HX_LOCAL_STACK_FRAME(_hx_pos_e7708a0ade6b0fe7_302_handleProp,"haxe.ui.binding.BindingManager","handleProp",0xffc02096,"haxe.ui.binding.BindingManager.handleProp","haxe/ui/binding/BindingManager.hx",302,0xd9a5117a)
HX_LOCAL_STACK_FRAME(_hx_pos_e7708a0ade6b0fe7_318_interpolate,"haxe.ui.binding.BindingManager","interpolate",0x6cb5a536,"haxe.ui.binding.BindingManager.interpolate","haxe/ui/binding/BindingManager.hx",318,0xd9a5117a)
HX_LOCAL_STACK_FRAME(_hx_pos_e7708a0ade6b0fe7_338_exec,"haxe.ui.binding.BindingManager","exec",0x37f4267c,"haxe.ui.binding.BindingManager.exec","haxe/ui/binding/BindingManager.hx",338,0xd9a5117a)
HX_LOCAL_STACK_FRAME(_hx_pos_e7708a0ade6b0fe7_365_findRoot,"haxe.ui.binding.BindingManager","findRoot",0x0e447f66,"haxe.ui.binding.BindingManager.findRoot","haxe/ui/binding/BindingManager.hx",365,0xd9a5117a)
HX_LOCAL_STACK_FRAME(_hx_pos_e7708a0ade6b0fe7_381_extractFields,"haxe.ui.binding.BindingManager","extractFields",0xc5a6364f,"haxe.ui.binding.BindingManager.extractFields","haxe/ui/binding/BindingManager.hx",381,0xd9a5117a)
HX_LOCAL_STACK_FRAME(_hx_pos_e7708a0ade6b0fe7_83_get_instance,"haxe.ui.binding.BindingManager","get_instance",0x93ee6989,"haxe.ui.binding.BindingManager.get_instance","haxe/ui/binding/BindingManager.hx",83,0xd9a5117a)
HX_LOCAL_STACK_FRAME(_hx_pos_e7708a0ade6b0fe7_81_boot,"haxe.ui.binding.BindingManager","boot",0x35f1b71d,"haxe.ui.binding.BindingManager.boot","haxe/ui/binding/BindingManager.hx",81,0xd9a5117a)
HX_LOCAL_STACK_FRAME(_hx_pos_e7708a0ade6b0fe7_93_boot,"haxe.ui.binding.BindingManager","boot",0x35f1b71d,"haxe.ui.binding.BindingManager.boot","haxe/ui/binding/BindingManager.hx",93,0xd9a5117a)
HX_LOCAL_STACK_FRAME(_hx_pos_e7708a0ade6b0fe7_94_boot,"haxe.ui.binding.BindingManager","boot",0x35f1b71d,"haxe.ui.binding.BindingManager.boot","haxe/ui/binding/BindingManager.hx",94,0xd9a5117a)
namespace haxe{
namespace ui{
namespace binding{

void BindingManager_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_e7708a0ade6b0fe7_80_new)
HXLINE( 337)		this->interp =  ::haxe::ui::scripting::ScriptInterp_obj::__alloc( HX_CTX );
HXLINE(  97)		this->addStaticClass(HX_("theme",09,7e,86,0f),::haxe::ui::themes::ThemeManager_obj::get_instance());
HXLINE(  98)		this->addStaticClass(HX_("lookupLocaleString",a5,3e,eb,28),::haxe::ui::locale::LocaleManager_obj::get_instance()->lookupString_dyn());
            	}

Dynamic BindingManager_obj::__CreateEmpty() { return new BindingManager_obj; }

void *BindingManager_obj::_hx_vtable = 0;

Dynamic BindingManager_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BindingManager_obj > _hx_result = new BindingManager_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BindingManager_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3567f4d3;
}

void BindingManager_obj::refreshAll(){
            	HX_STACKFRAME(&_hx_pos_e7708a0ade6b0fe7_102_refreshAll)
HXDLIN( 102)		 ::Dynamic c = ::haxe::ui::binding::BindingManager_obj::bindingInfo->keys();
HXDLIN( 102)		while(( (bool)(c->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXDLIN( 102)			 ::haxe::ui::core::Component c1 = ( ( ::haxe::ui::core::Component)(c->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 103)			this->refreshFor(c1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BindingManager_obj,refreshAll,(void))

void BindingManager_obj::refreshFor( ::haxe::ui::core::Component c){
            	HX_STACKFRAME(&_hx_pos_e7708a0ade6b0fe7_107_refreshFor)
HXLINE( 108)		if ((::haxe::ui::binding::BindingManager_obj::bindingInfo->exists(c) == false)) {
HXLINE( 109)			return;
            		}
HXLINE( 112)		 ::haxe::ui::binding::BindingInfo info = ( ( ::haxe::ui::binding::BindingInfo)(::haxe::ui::binding::BindingManager_obj::bindingInfo->get(c)) );
HXLINE( 113)		{
HXLINE( 113)			 ::Dynamic propName = info->props->keys();
HXDLIN( 113)			while(( (bool)(propName->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 113)				::String propName1 = ( (::String)(propName->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 114)				 ::haxe::ui::binding::PropertyInfo propInfo = ( ( ::haxe::ui::binding::PropertyInfo)(info->props->get(propName1)) );
HXLINE( 115)				this->handleProp(c,propInfo);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BindingManager_obj,refreshFor,(void))

void BindingManager_obj::addStaticClass(::String name, ::Dynamic c){
            	HX_STACKFRAME(&_hx_pos_e7708a0ade6b0fe7_120_addStaticClass)
HXDLIN( 120)		this->interp->variables->set(name,c);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BindingManager_obj,addStaticClass,(void))

void BindingManager_obj::add( ::haxe::ui::core::Component c,::String prop,::String script){
            	HX_GC_STACKFRAME(&_hx_pos_e7708a0ade6b0fe7_123_add)
HXDLIN( 123)		 ::haxe::ui::binding::BindingManager _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 124)		if ((c->get_isReady() == false)) {
            			HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_0, ::haxe::ui::binding::BindingManager,_gthis,::String,script,::String,prop, ::haxe::ui::core::Component,c) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_e7708a0ade6b0fe7_126_add)
HXLINE( 126)				_gthis->add(c,prop,script);
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 125)			::haxe::ui::Toolkit_obj::callLater( ::Dynamic(new _hx_Closure_0(_gthis,script,prop,c)));
HXLINE( 128)			return;
            		}
HXLINE( 131)		if ((this->hasBindingInfo(c,prop,script) == true)) {
HXLINE( 132)			return;
            		}
HXLINE( 135)		int n1 = script.indexOf(HX_("${",d7,1f,00,00),null());
HXLINE( 136)		while((n1 != -1)){
HXLINE( 137)			int n2 = script.indexOf(HX_("}",7d,00,00,00),n1);
HXLINE( 138)			::String scriptPart = script.substr((n1 + 2),((n2 - n1) - 2));
HXLINE( 139)			 ::hscript::Parser parser =  ::hscript::Parser_obj::__alloc( HX_CTX );
HXLINE( 140)			 ::hscript::Expr expr = parser->parseString(scriptPart,null());
HXLINE( 142)			 ::haxe::ui::binding::BindingInfo info = ( ( ::haxe::ui::binding::BindingInfo)(::haxe::ui::binding::BindingManager_obj::bindingInfo->get(c)) );
HXLINE( 143)			if (::hx::IsNull( info )) {
HXLINE( 144)				info =  ::haxe::ui::binding::BindingInfo_obj::__alloc( HX_CTX );
HXLINE( 145)				::haxe::ui::binding::BindingManager_obj::bindingInfo->set(c,info);
            			}
HXLINE( 148)			 ::haxe::ui::binding::PropertyInfo propInfo = info->addProp(prop,script);
HXLINE( 149)			this->extractFields(expr,propInfo);
HXLINE( 150)			{
HXLINE( 150)				 ::Dynamic objectId = propInfo->objects->keys();
HXDLIN( 150)				while(( (bool)(objectId->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 150)					::String objectId1 = ( (::String)(objectId->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 151)					{
HXLINE( 151)						int _g = 0;
HXDLIN( 151)						::Array< ::String > _g1 = ( (::Array< ::String >)(propInfo->objects->get(objectId1)) );
HXDLIN( 151)						while((_g < _g1->length)){
HXLINE( 151)							::String fieldId = _g1->__get(_g);
HXDLIN( 151)							_g = (_g + 1);
HXLINE( 152)							 ::haxe::ui::binding::TargetInfo targetInfo = ( ( ::haxe::ui::binding::TargetInfo)(::haxe::ui::binding::BindingManager_obj::targets->get(objectId1)) );
HXLINE( 153)							if (::hx::IsNull( targetInfo )) {
HXLINE( 154)								targetInfo =  ::haxe::ui::binding::TargetInfo_obj::__alloc( HX_CTX );
HXLINE( 155)								::haxe::ui::binding::BindingManager_obj::targets->set(objectId1,targetInfo);
            							}
HXLINE( 157)							targetInfo->addBinding(fieldId,c,propInfo);
            						}
            					}
            				}
            			}
HXLINE( 160)			this->handleProp(c,propInfo);
HXLINE( 162)			n1 = script.indexOf(HX_("${",d7,1f,00,00),n2);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(BindingManager_obj,add,(void))

 ::haxe::ui::binding::PropertyInfo BindingManager_obj::findLanguageBinding( ::haxe::ui::core::Component c,::String prop){
            	HX_STACKFRAME(&_hx_pos_e7708a0ade6b0fe7_166_findLanguageBinding)
HXLINE( 167)		 ::haxe::ui::binding::BindingInfo info = ( ( ::haxe::ui::binding::BindingInfo)(::haxe::ui::binding::BindingManager_obj::bindingInfo->get(c)) );
HXLINE( 168)		if (::hx::IsNull( info )) {
HXLINE( 169)			return null();
            		}
HXLINE( 172)		 ::haxe::ui::binding::PropertyInfo propInfo = ( ( ::haxe::ui::binding::PropertyInfo)(info->props->get(prop)) );
HXLINE( 173)		return propInfo;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BindingManager_obj,findLanguageBinding,return )

void BindingManager_obj::addLanguageBinding( ::haxe::ui::core::Component c,::String prop,::String script,::hx::Null< bool >  __o_overwrite){
            		bool overwrite = __o_overwrite.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_e7708a0ade6b0fe7_176_addLanguageBinding)
HXLINE( 177)		bool _hx_tmp;
HXDLIN( 177)		if ((this->hasBindingInfo(c,prop,script) == true)) {
HXLINE( 177)			_hx_tmp = (overwrite == false);
            		}
            		else {
HXLINE( 177)			_hx_tmp = false;
            		}
HXDLIN( 177)		if (_hx_tmp) {
HXLINE( 178)			return;
            		}
HXLINE( 181)		int n1 = script.indexOf(HX_("{{",a0,6b,00,00),null());
HXLINE( 182)		while((n1 != -1)){
HXLINE( 183)			int n2 = script.indexOf(HX_("}}",60,6d,00,00),n1);
HXLINE( 184)			::String scriptPart = script.substr((n1 + 2),((n2 - n1) - 2));
HXLINE( 185)			scriptPart = this->buildLocaleScript(scriptPart);
HXLINE( 186)			 ::hscript::Parser parser =  ::hscript::Parser_obj::__alloc( HX_CTX );
HXLINE( 187)			 ::hscript::Expr expr = parser->parseString(scriptPart,null());
HXLINE( 189)			 ::haxe::ui::binding::BindingInfo info = ( ( ::haxe::ui::binding::BindingInfo)(::haxe::ui::binding::BindingManager_obj::bindingInfo->get(c)) );
HXLINE( 190)			if (::hx::IsNull( info )) {
HXLINE( 191)				info =  ::haxe::ui::binding::BindingInfo_obj::__alloc( HX_CTX );
HXLINE( 192)				::haxe::ui::binding::BindingManager_obj::bindingInfo->set(c,info);
            			}
HXLINE( 194)			 ::haxe::ui::binding::PropertyInfo propInfo = ( ( ::haxe::ui::binding::PropertyInfo)(info->props->get(prop)) );
HXLINE( 195)			if (::hx::IsNull( propInfo )) {
HXLINE( 196)				propInfo = info->addProp(prop,script);
            			}
            			else {
HXLINE( 198)				propInfo->reset();
HXLINE( 199)				propInfo->script = script;
            			}
HXLINE( 202)			propInfo->languageBinding = true;
HXLINE( 203)			this->extractFields(expr,propInfo);
HXLINE( 204)			{
HXLINE( 204)				 ::Dynamic objectId = propInfo->objects->keys();
HXDLIN( 204)				while(( (bool)(objectId->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 204)					::String objectId1 = ( (::String)(objectId->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 205)					{
HXLINE( 205)						int _g = 0;
HXDLIN( 205)						::Array< ::String > _g1 = ( (::Array< ::String >)(propInfo->objects->get(objectId1)) );
HXDLIN( 205)						while((_g < _g1->length)){
HXLINE( 205)							::String fieldId = _g1->__get(_g);
HXDLIN( 205)							_g = (_g + 1);
HXLINE( 206)							 ::haxe::ui::binding::TargetInfo targetInfo = ( ( ::haxe::ui::binding::TargetInfo)(::haxe::ui::binding::BindingManager_obj::targets->get(objectId1)) );
HXLINE( 207)							if (::hx::IsNull( targetInfo )) {
HXLINE( 208)								targetInfo =  ::haxe::ui::binding::TargetInfo_obj::__alloc( HX_CTX );
HXLINE( 209)								::haxe::ui::binding::BindingManager_obj::targets->set(objectId1,targetInfo);
            							}
HXLINE( 211)							targetInfo->addBinding(fieldId,c,propInfo);
            						}
            					}
            				}
            			}
HXLINE( 214)			this->handleProp(c,propInfo);
HXLINE( 216)			n1 = script.indexOf(HX_("{{",a0,6b,00,00),n2);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(BindingManager_obj,addLanguageBinding,(void))

void BindingManager_obj::remove( ::haxe::ui::core::Component c){
            	HX_STACKFRAME(&_hx_pos_e7708a0ade6b0fe7_221_remove)
HXDLIN( 221)		::haxe::ui::binding::BindingManager_obj::bindingInfo->remove(c);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BindingManager_obj,remove,(void))

void BindingManager_obj::cloneBinding( ::haxe::ui::core::Component from, ::haxe::ui::core::Component to){
            	HX_STACKFRAME(&_hx_pos_e7708a0ade6b0fe7_224_cloneBinding)
HXLINE( 225)		 ::haxe::ui::binding::BindingInfo info = ( ( ::haxe::ui::binding::BindingInfo)(::haxe::ui::binding::BindingManager_obj::bindingInfo->get(from)) );
HXLINE( 226)		if (::hx::IsNull( info )) {
HXLINE( 227)			return;
            		}
HXLINE( 230)		{
HXLINE( 230)			 ::Dynamic prop = info->props->keys();
HXDLIN( 230)			while(( (bool)(prop->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 230)				::String prop1 = ( (::String)(prop->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 231)				 ::haxe::ui::binding::PropertyInfo propInfo = ( ( ::haxe::ui::binding::PropertyInfo)(info->props->get(prop1)) );
HXLINE( 232)				if ((propInfo->languageBinding == false)) {
HXLINE( 233)					this->add(to,prop1,propInfo->script);
            				}
            				else {
HXLINE( 235)					this->addLanguageBinding(to,prop1,propInfo->script,null());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BindingManager_obj,cloneBinding,(void))

bool BindingManager_obj::hasBindingInfo( ::haxe::ui::core::Component c,::String prop,::String script){
            	HX_STACKFRAME(&_hx_pos_e7708a0ade6b0fe7_240_hasBindingInfo)
HXLINE( 241)		 ::haxe::ui::binding::BindingInfo info = ( ( ::haxe::ui::binding::BindingInfo)(::haxe::ui::binding::BindingManager_obj::bindingInfo->get(c)) );
HXLINE( 242)		if (::hx::IsNull( info )) {
HXLINE( 243)			return false;
            		}
HXLINE( 246)		if ((info->props->exists(prop) == false)) {
HXLINE( 247)			return false;
            		}
HXLINE( 250)		 ::haxe::ui::binding::PropertyInfo bindingScript = ( ( ::haxe::ui::binding::PropertyInfo)(info->props->get(prop)) );
HXLINE( 251)		return (bindingScript->script == script);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BindingManager_obj,hasBindingInfo,return )

bool BindingManager_obj::isLocaleString(::String script){
            	HX_STACKFRAME(&_hx_pos_e7708a0ade6b0fe7_255_isLocaleString)
HXDLIN( 255)		 ::haxe::ui::locale::LocaleManager _hx_tmp = ::haxe::ui::locale::LocaleManager_obj::get_instance();
HXDLIN( 255)		return _hx_tmp->hasString(::StringTools_obj::trim(script.split(HX_(",",2c,00,00,00))->__get(0)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(BindingManager_obj,isLocaleString,return )

::String BindingManager_obj::buildLocaleScript(::String script){
            	HX_STACKFRAME(&_hx_pos_e7708a0ade6b0fe7_258_buildLocaleScript)
HXLINE( 259)		if (::hx::IsNull( script )) {
HXLINE( 260)			return null();
            		}
HXLINE( 262)		if ((script.length == 0)) {
HXLINE( 263)			return script;
            		}
HXLINE( 265)		if (::StringTools_obj::startsWith(script,HX_("lookupLocaleString(",e3,91,eb,a4))) {
HXLINE( 266)			return script;
            		}
HXLINE( 268)		::Array< ::String > params = script.split(HX_(",",2c,00,00,00));
HXLINE( 269)		script = ((HX_("lookupLocaleString('",e4,14,34,a9) + params->__get(0)) + HX_("'",27,00,00,00));
HXLINE( 270)		params->shift();
HXLINE( 271)		if ((params->length > 0)) {
HXLINE( 272)			script = (script + HX_(",",2c,00,00,00));
HXLINE( 273)			script = (script + params->join(HX_(",",2c,00,00,00)));
            		}
HXLINE( 275)		script = (script + HX_(")",29,00,00,00));
HXLINE( 276)		return script;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BindingManager_obj,buildLocaleScript,return )

void BindingManager_obj::componentPropChanged( ::haxe::ui::core::Component c,::String prop){
            	HX_STACKFRAME(&_hx_pos_e7708a0ade6b0fe7_279_componentPropChanged)
HXLINE( 280)		bool _hx_tmp;
HXDLIN( 280)		if (::hx::IsNotNull( c )) {
HXLINE( 280)			_hx_tmp = ::hx::IsNull( c->get_id() );
            		}
            		else {
HXLINE( 280)			_hx_tmp = true;
            		}
HXDLIN( 280)		if (_hx_tmp) {
HXLINE( 281)			return;
            		}
HXLINE( 284)		::Dynamic this1 = ::haxe::ui::binding::BindingManager_obj::targets;
HXDLIN( 284)		 ::haxe::ui::binding::TargetInfo targetInfo = ( ( ::haxe::ui::binding::TargetInfo)(( ( ::haxe::ds::StringMap)(this1) )->get(c->get_id())) );
HXLINE( 285)		if (::hx::IsNull( targetInfo )) {
HXLINE( 286)			return;
            		}
HXLINE( 289)		 ::haxe::ds::ObjectMap map = ( ( ::haxe::ds::ObjectMap)(targetInfo->props->get(prop)) );
HXLINE( 290)		if (::hx::IsNull( map )) {
HXLINE( 291)			return;
            		}
HXLINE( 294)		{
HXLINE( 294)			 ::Dynamic t = map->keys();
HXDLIN( 294)			while(( (bool)(t->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 294)				 ::haxe::ui::core::Component t1 = ( ( ::haxe::ui::core::Component)(t->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 295)				::Array< ::Dynamic> array = ( (::Array< ::Dynamic>)(map->get(t1)) );
HXLINE( 296)				{
HXLINE( 296)					int _g = 0;
HXDLIN( 296)					while((_g < array->length)){
HXLINE( 296)						 ::haxe::ui::binding::PropertyInfo prop = array->__get(_g).StaticCast<  ::haxe::ui::binding::PropertyInfo >();
HXDLIN( 296)						_g = (_g + 1);
HXLINE( 297)						this->handleProp(t1,prop);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BindingManager_obj,componentPropChanged,(void))

void BindingManager_obj::handleProp( ::haxe::ui::core::Component t, ::haxe::ui::binding::PropertyInfo prop){
            	HX_STACKFRAME(&_hx_pos_e7708a0ade6b0fe7_302_handleProp)
HXLINE( 303)		 ::Dynamic result = this->interpolate(prop->script,prop,t);
HXLINE( 304)		 ::ValueType currentType = ::Type_obj::_hx_typeof(::Reflect_obj::getProperty(t,prop->name));
HXLINE( 305)		if (::hx::IsPointerEq( currentType,::ValueType_obj::TFloat_dyn() )) {
HXLINE( 306)			result = ::Std_obj::parseFloat(::Std_obj::string(result));
            		}
            		else {
HXLINE( 307)			if (::hx::IsPointerEq( currentType,::ValueType_obj::TInt_dyn() )) {
HXLINE( 308)				result = ::Std_obj::parseInt(::Std_obj::string(result));
            			}
            			else {
HXLINE( 309)				if (::hx::IsPointerEq( currentType,::ValueType_obj::TBool_dyn() )) {
HXLINE( 310)					result = (::Std_obj::string(result) == HX_("true",4e,a7,03,4d));
            				}
            				else {
HXLINE( 311)					::String _hx_tmp = t->get_className();
HXDLIN( 311)					if ((::haxe::ui::core::TypeMap_obj::getTypeInfo(_hx_tmp,prop->name) == HX_("Variant",65,68,33,aa))) {
HXLINE( 312)						result = ::haxe::ui::util::_Variant::Variant_Impl__obj::fromDynamic(result);
            					}
            				}
            			}
            		}
HXLINE( 315)		::Reflect_obj::setProperty(t,prop->name,result);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BindingManager_obj,handleProp,(void))

::String BindingManager_obj::interpolate(::String s, ::haxe::ui::binding::PropertyInfo prop, ::haxe::ui::core::Component t){
            	HX_STACKFRAME(&_hx_pos_e7708a0ade6b0fe7_318_interpolate)
HXLINE( 319)		::String copy = s;
HXLINE( 320)		copy = ::StringTools_obj::replace(copy,HX_("{{",a0,6b,00,00),HX_("${",d7,1f,00,00));
HXLINE( 321)		copy = ::StringTools_obj::replace(copy,HX_("}}",60,6d,00,00),HX_("}",7d,00,00,00));
HXLINE( 322)		int n1 = copy.indexOf(HX_("${",d7,1f,00,00),null());
HXLINE( 323)		while((n1 != -1)){
HXLINE( 324)			int n2 = copy.indexOf(HX_("}",7d,00,00,00),n1);
HXLINE( 325)			::String before = copy.substr(0,n1);
HXLINE( 326)			::String after = copy.substr((n2 + 1),copy.length);
HXLINE( 327)			::String script = copy.substr((n1 + 2),((n2 - n1) - 2));
HXLINE( 329)			 ::Dynamic result = this->exec(script,prop,t);
HXLINE( 331)			::String copy1;
HXDLIN( 331)			if (::hx::IsNull( result )) {
HXLINE( 331)				copy1 = HX_("null",87,9e,0e,49);
            			}
            			else {
HXLINE( 331)				copy1 = ::Std_obj::string(result);
            			}
HXDLIN( 331)			copy = ((before + copy1) + after);
HXLINE( 332)			n1 = copy.indexOf(HX_("${",d7,1f,00,00),null());
            		}
HXLINE( 334)		return copy;
            	}


HX_DEFINE_DYNAMIC_FUNC3(BindingManager_obj,interpolate,return )

 ::Dynamic BindingManager_obj::exec(::String script, ::haxe::ui::binding::PropertyInfo prop, ::haxe::ui::core::Component t){
            	HX_GC_STACKFRAME(&_hx_pos_e7708a0ade6b0fe7_338_exec)
HXLINE( 339)		if (this->isLocaleString(script)) {
HXLINE( 340)			script = this->buildLocaleScript(script);
            		}
HXLINE( 342)		 ::hscript::Parser parser =  ::hscript::Parser_obj::__alloc( HX_CTX );
HXLINE( 343)		 ::hscript::Expr expr = parser->parseString(script,null());
HXLINE( 345)		 ::haxe::ui::core::Component root = this->findRoot(t);
HXLINE( 346)		{
HXLINE( 346)			 ::Dynamic objectId = prop->objects->keys();
HXDLIN( 346)			while(( (bool)(objectId->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 346)				::String objectId1 = ( (::String)(objectId->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 347)				 ::Dynamic object = root->findComponent(objectId1,null(),null(),null());
HXLINE( 348)				if (::hx::IsNotNull( object )) {
HXLINE( 349)					this->interp->variables->set(objectId1,object);
            				}
            			}
            		}
HXLINE( 352)		this->interp->variables->set(HX_("this",5e,06,fc,4c),t);
HXLINE( 354)		 ::Dynamic result = null();
HXLINE( 355)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 356)			result = this->interp->expr(expr);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(   1)				{
HXLINE(   1)					null();
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 362)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC3(BindingManager_obj,exec,return )

 ::haxe::ui::core::Component BindingManager_obj::findRoot( ::haxe::ui::core::Component c){
            	HX_STACKFRAME(&_hx_pos_e7708a0ade6b0fe7_365_findRoot)
HXLINE( 366)		 ::haxe::ui::core::Component root = c;
HXLINE( 368)		 ::haxe::ui::core::Component ref = c;
HXLINE( 369)		while(::hx::IsNotNull( ref )){
HXLINE( 370)			root = ref;
HXLINE( 371)			if (root->bindingRoot) {
HXLINE( 372)				goto _hx_goto_30;
            			}
HXLINE( 374)			ref = ref->parentComponent;
            		}
            		_hx_goto_30:;
HXLINE( 377)		return root;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BindingManager_obj,findRoot,return )

void BindingManager_obj::extractFields( ::hscript::Expr expr, ::haxe::ui::binding::PropertyInfo propInfo){
            	HX_STACKFRAME(&_hx_pos_e7708a0ade6b0fe7_381_extractFields)
HXDLIN( 381)		switch((int)(expr->_hx_getIndex())){
            			case (int)0: {
HXLINE( 401)				 ::hscript::Const _g = expr->_hx_getObject(0).StaticCast<  ::hscript::Const >();
            			}
            			break;
            			case (int)1: {
HXLINE( 390)				::String objectId = expr->_hx_getString(0);
HXLINE( 391)				propInfo->addObject(objectId,HX_("value",71,7f,b8,31));
            			}
            			break;
            			case (int)5: {
HXLINE( 388)				 ::hscript::Expr _g = expr->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXDLIN( 388)				::String _g1 = expr->_hx_getString(1);
HXDLIN( 388)				switch((int)(_g->_hx_getIndex())){
            					case (int)1: {
HXLINE( 386)						::String objectId = _g->_hx_getString(0);
HXDLIN( 386)						::String fieldId = _g1;
HXLINE( 387)						propInfo->addObject(objectId,fieldId);
            					}
            					break;
            					case (int)5: {
HXLINE( 388)						 ::hscript::Expr _g1 = _g->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXDLIN( 388)						if ((_g1->_hx_getIndex() == 1)) {
HXLINE( 388)							::String objectId = _g1->_hx_getString(0);
HXDLIN( 388)							::String fieldId = _g->_hx_getString(1);
HXLINE( 389)							propInfo->addObject(objectId,fieldId);
            						}
            						else {
HXLINE( 403)							::haxe::Log_obj::trace(expr,::hx::SourceInfo(HX_("haxe/ui/binding/BindingManager.hx",7a,11,a5,d9),403,HX_("haxe.ui.binding.BindingManager",63,15,e1,eb),HX_("extractFields",9a,9e,76,f5)));
            						}
            					}
            					break;
            					default:{
HXLINE( 403)						::haxe::Log_obj::trace(expr,::hx::SourceInfo(HX_("haxe/ui/binding/BindingManager.hx",7a,11,a5,d9),403,HX_("haxe.ui.binding.BindingManager",63,15,e1,eb),HX_("extractFields",9a,9e,76,f5)));
            					}
            				}
            			}
            			break;
            			case (int)6: {
HXLINE( 392)				::String _g = expr->_hx_getString(0);
HXDLIN( 392)				{
HXLINE( 392)					 ::hscript::Expr e1 = expr->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 392)					 ::hscript::Expr e2 = expr->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 392)					{
HXLINE( 393)						this->extractFields(e1,propInfo);
HXLINE( 394)						this->extractFields(e2,propInfo);
            					}
            				}
            			}
            			break;
            			case (int)7: {
HXLINE( 395)				::String _g = expr->_hx_getString(0);
HXDLIN( 395)				bool _g1 = expr->_hx_getBool(1);
HXDLIN( 395)				{
HXLINE( 395)					 ::hscript::Expr e = expr->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXLINE( 396)					this->extractFields(e,propInfo);
            				}
            			}
            			break;
            			case (int)8: {
HXLINE( 382)				 ::hscript::Expr _g = expr->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXDLIN( 382)				{
HXLINE( 382)					::Array< ::Dynamic> params = expr->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 383)					{
HXLINE( 383)						int _g1 = 0;
HXDLIN( 383)						while((_g1 < params->length)){
HXLINE( 383)							 ::hscript::Expr p = params->__get(_g1).StaticCast<  ::hscript::Expr >();
HXDLIN( 383)							_g1 = (_g1 + 1);
HXLINE( 384)							this->extractFields(p,propInfo);
            						}
            					}
            				}
            			}
            			break;
            			case (int)17: {
HXLINE( 397)				::Array< ::Dynamic> values = expr->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 398)				{
HXLINE( 398)					int _g = 0;
HXDLIN( 398)					while((_g < values->length)){
HXLINE( 398)						 ::hscript::Expr v = values->__get(_g).StaticCast<  ::hscript::Expr >();
HXDLIN( 398)						_g = (_g + 1);
HXLINE( 399)						this->extractFields(v,propInfo);
            					}
            				}
            			}
            			break;
            			default:{
HXLINE( 403)				::haxe::Log_obj::trace(expr,::hx::SourceInfo(HX_("haxe/ui/binding/BindingManager.hx",7a,11,a5,d9),403,HX_("haxe.ui.binding.BindingManager",63,15,e1,eb),HX_("extractFields",9a,9e,76,f5)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BindingManager_obj,extractFields,(void))

 ::haxe::ui::binding::BindingManager BindingManager_obj::_instance;

 ::haxe::ui::binding::BindingManager BindingManager_obj::instance;

 ::haxe::ui::binding::BindingManager BindingManager_obj::get_instance(){
            	HX_GC_STACKFRAME(&_hx_pos_e7708a0ade6b0fe7_83_get_instance)
HXLINE(  84)		if (::hx::IsNull( ::haxe::ui::binding::BindingManager_obj::_instance )) {
HXLINE(  85)			::haxe::ui::binding::BindingManager_obj::_instance =  ::haxe::ui::binding::BindingManager_obj::__alloc( HX_CTX );
            		}
HXLINE(  87)		return ::haxe::ui::binding::BindingManager_obj::_instance;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BindingManager_obj,get_instance,return )

 ::haxe::ds::ObjectMap BindingManager_obj::bindingInfo;

 ::haxe::ds::StringMap BindingManager_obj::targets;


::hx::ObjectPtr< BindingManager_obj > BindingManager_obj::__new() {
	::hx::ObjectPtr< BindingManager_obj > __this = new BindingManager_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< BindingManager_obj > BindingManager_obj::__alloc(::hx::Ctx *_hx_ctx) {
	BindingManager_obj *__this = (BindingManager_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BindingManager_obj), true, "haxe.ui.binding.BindingManager"));
	*(void **)__this = BindingManager_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BindingManager_obj::BindingManager_obj()
{
}

void BindingManager_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BindingManager);
	HX_MARK_MEMBER_NAME(interp,"interp");
	HX_MARK_END_CLASS();
}

void BindingManager_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(interp,"interp");
}

::hx::Val BindingManager_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"exec") ) { return ::hx::Val( exec_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"remove") ) { return ::hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"interp") ) { return ::hx::Val( interp ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"findRoot") ) { return ::hx::Val( findRoot_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"refreshAll") ) { return ::hx::Val( refreshAll_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshFor") ) { return ::hx::Val( refreshFor_dyn() ); }
		if (HX_FIELD_EQ(inName,"handleProp") ) { return ::hx::Val( handleProp_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"interpolate") ) { return ::hx::Val( interpolate_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cloneBinding") ) { return ::hx::Val( cloneBinding_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"extractFields") ) { return ::hx::Val( extractFields_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"addStaticClass") ) { return ::hx::Val( addStaticClass_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasBindingInfo") ) { return ::hx::Val( hasBindingInfo_dyn() ); }
		if (HX_FIELD_EQ(inName,"isLocaleString") ) { return ::hx::Val( isLocaleString_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"buildLocaleScript") ) { return ::hx::Val( buildLocaleScript_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"addLanguageBinding") ) { return ::hx::Val( addLanguageBinding_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"findLanguageBinding") ) { return ::hx::Val( findLanguageBinding_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"componentPropChanged") ) { return ::hx::Val( componentPropChanged_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BindingManager_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"targets") ) { outValue = ( targets ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = ( inCallProp == ::hx::paccAlways ? get_instance() : instance ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_instance") ) { outValue = ( _instance ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bindingInfo") ) { outValue = ( bindingInfo ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_instance") ) { outValue = get_instance_dyn(); return true; }
	}
	return false;
}

::hx::Val BindingManager_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"interp") ) { interp=inValue.Cast<  ::haxe::ui::scripting::ScriptInterp >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BindingManager_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"targets") ) { targets=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::haxe::ui::binding::BindingManager >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_instance") ) { _instance=ioValue.Cast<  ::haxe::ui::binding::BindingManager >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bindingInfo") ) { bindingInfo=ioValue.Cast<  ::haxe::ds::ObjectMap >(); return true; }
	}
	return false;
}

void BindingManager_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("interp",d4,79,86,9e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BindingManager_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ui::scripting::ScriptInterp */ ,(int)offsetof(BindingManager_obj,interp),HX_("interp",d4,79,86,9e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo BindingManager_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ui::binding::BindingManager */ ,(void *) &BindingManager_obj::_instance,HX_("_instance",f4,16,77,a1)},
	{::hx::fsObject /*  ::haxe::ui::binding::BindingManager */ ,(void *) &BindingManager_obj::instance,HX_("instance",95,1f,e1,59)},
	{::hx::fsObject /*  ::haxe::ds::ObjectMap */ ,(void *) &BindingManager_obj::bindingInfo,HX_("bindingInfo",53,76,89,b7)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &BindingManager_obj::targets,HX_("targets",02,f4,67,88)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String BindingManager_obj_sMemberFields[] = {
	HX_("refreshAll",06,32,20,07),
	HX_("refreshFor",ee,ff,23,07),
	HX_("addStaticClass",09,5c,fc,f2),
	HX_("add",21,f2,49,00),
	HX_("findLanguageBinding",94,cd,47,8b),
	HX_("addLanguageBinding",ac,10,6c,d7),
	HX_("remove",44,9c,88,04),
	HX_("cloneBinding",68,75,47,ac),
	HX_("hasBindingInfo",19,b9,13,a9),
	HX_("isLocaleString",15,60,1e,ad),
	HX_("buildLocaleScript",93,da,9c,5a),
	HX_("componentPropChanged",d4,31,2d,da),
	HX_("handleProp",6b,6b,04,69),
	HX_("interpolate",c1,d4,32,1f),
	HX_("interp",d4,79,86,9e),
	HX_("exec",91,f3,1d,43),
	HX_("findRoot",fb,fa,42,9e),
	HX_("extractFields",9a,9e,76,f5),
	::String(null()) };

static void BindingManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BindingManager_obj::_instance,"_instance");
	HX_MARK_MEMBER_NAME(BindingManager_obj::instance,"instance");
	HX_MARK_MEMBER_NAME(BindingManager_obj::bindingInfo,"bindingInfo");
	HX_MARK_MEMBER_NAME(BindingManager_obj::targets,"targets");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BindingManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BindingManager_obj::_instance,"_instance");
	HX_VISIT_MEMBER_NAME(BindingManager_obj::instance,"instance");
	HX_VISIT_MEMBER_NAME(BindingManager_obj::bindingInfo,"bindingInfo");
	HX_VISIT_MEMBER_NAME(BindingManager_obj::targets,"targets");
};

#endif

::hx::Class BindingManager_obj::__mClass;

static ::String BindingManager_obj_sStaticFields[] = {
	HX_("_instance",f4,16,77,a1),
	HX_("instance",95,1f,e1,59),
	HX_("get_instance",9e,d3,fa,0e),
	HX_("bindingInfo",53,76,89,b7),
	HX_("targets",02,f4,67,88),
	::String(null())
};

void BindingManager_obj::__register()
{
	BindingManager_obj _hx_dummy;
	BindingManager_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.binding.BindingManager",63,15,e1,eb);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BindingManager_obj::__GetStatic;
	__mClass->mSetStaticField = &BindingManager_obj::__SetStatic;
	__mClass->mMarkFunc = BindingManager_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(BindingManager_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BindingManager_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BindingManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BindingManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BindingManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BindingManager_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BindingManager_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e7708a0ade6b0fe7_81_boot)
HXDLIN(  81)		_instance = null();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_e7708a0ade6b0fe7_93_boot)
HXDLIN(  93)		bindingInfo =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_e7708a0ade6b0fe7_94_boot)
HXDLIN(  94)		targets =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace haxe
} // end namespace ui
} // end namespace binding
